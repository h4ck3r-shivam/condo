# CONDO DOCKER DEPLOYMENT GUIDE

This guide provides instructions for deploying the Condo property management system using Docker containers, eliminating the need for direct installations on the host system.

## SERVER REQUIREMENTS

- Ubuntu Server 20.04 LTS or newer
- At least 4GB RAM (8GB+ recommended for Docker containers)
- At least 20GB free disk space
- Docker and Docker Compose installed

## 1. INSTALL DOCKER AND DOCKER COMPOSE

```bash
# Update package listings
sudo apt update && sudo apt upgrade -y

# Install required packages
sudo apt install -y apt-transport-https ca-certificates curl software-properties-common

# Add Docker's official GPG key
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

# Add the Docker repository
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# Update package listings with Docker repository
sudo apt update

# Install Docker
sudo apt install -y docker-ce docker-ce-cli containerd.io

# Add your user to the docker group to run docker without sudo
sudo usermod -aG docker $USER

# Install Docker Compose
sudo apt install -y docker-compose-plugin

# Verify installations
docker --version
docker compose version
```

## 2. CLONE THE REPOSITORY

```bash
# Create a directory for the app
mkdir -p /opt/condo
cd /opt/condo

# Clone the repository
git clone https://github.com/open-condo-software/condo.git .
```

## 3. CREATE PRODUCTION DOCKER COMPOSE FILE

Create a new file named `docker-compose.prod.yml`:

```bash
nano docker-compose.prod.yml
```

Add the following content:

```yaml
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16.8
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: condo
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - condo_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis
  redis:
    image: redis:6.2
    command: ["redis-server", "--appendonly", "yes", "--databases", "64"]
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - condo_network
    restart: unless-stopped

  # Main Condo Application
  condo-app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/condo
      REDIS_URL: redis://redis:6379/0
      COOKIE_SECRET: ${COOKIE_SECRET:-please-change-this-cookie-secret-to-a-secure-random-string}
      SERVER_URL: ${SERVER_URL:-http://localhost:3000}
      FILE_FIELD_ADAPTER: ${FILE_FIELD_ADAPTER:-local}
      LOCAL_FILE_STORAGE_DIR: ${LOCAL_FILE_STORAGE_DIR:-/app/storage}
      PORT: ${PORT:-3000}
      # Add additional environment variables as needed
    volumes:
      - condo_storage:/app/storage
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - condo_network
    command: ["yarn", "workspace", "@app/condo", "start"]
    restart: unless-stopped

  # Worker for async tasks
  condo-worker:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/condo
      REDIS_URL: redis://redis:6379/0
      COOKIE_SECRET: ${COOKIE_SECRET:-please-change-this-cookie-secret-to-a-secure-random-string}
      # Add additional environment variables as needed
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - condo_network
    command: ["yarn", "workspace", "@app/condo", "worker"]
    restart: unless-stopped

networks:
  condo_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  condo_storage:
```

## 4. CREATE .ENV FILE FOR DOCKER COMPOSE

Create a `.env` file for Docker Compose environment variables:

```bash
nano .env
```

Add the following content:

```
# Database credentials
POSTGRES_PASSWORD=your_secure_db_password

# Application settings
COOKIE_SECRET=your_random_secure_string
SERVER_URL=http://your-server-ip-or-domain:3000
PORT=3000

# File storage
FILE_FIELD_ADAPTER=local
LOCAL_FILE_STORAGE_DIR=/app/storage

# Default admin credentials (you may want to change these)
DEFAULT_TEST_ADMIN_IDENTITY=admin@example.com
DEFAULT_TEST_ADMIN_SECRET=admin123
```

## 5. BUILD DEPENDENCIES AND START THE DOCKER CONTAINERS

First, let's create a script to build the dependencies before starting the containers:

```bash
nano /opt/condo/init.sh
```

Add the following content:

```bash
#!/bin/bash
set -e

echo "Building Condo dependencies..."
docker compose -f docker-compose.prod.yml build

echo "Starting containers..."
docker compose -f docker-compose.prod.yml up -d postgres redis

echo "Waiting for PostgreSQL to be ready..."
sleep 10

echo "Building application dependencies..."
docker compose -f docker-compose.prod.yml run --rm condo-app yarn workspace @app/condo build:deps

echo "Building the main application..."
docker compose -f docker-compose.prod.yml run --rm condo-app yarn workspace @app/condo build

echo "Running database migrations..."
docker compose -f docker-compose.prod.yml run --rm condo-app yarn workspace @app/condo migrate

echo "Starting all containers..."
docker compose -f docker-compose.prod.yml up -d

echo "Condo application is now running!"
echo "Access the application at: http://localhost:${PORT:-3000}"
```

Make the script executable and run it:

```bash
chmod +x /opt/condo/init.sh
./init.sh
```

## 6. ACCESSING THE APPLICATION

Once the application is running, you can access it at:

```
http://your-server-ip:3000
```

To log in, go to:

```
http://your-server-ip:3000/admin/signin
```

Use the credentials defined in your .env file (DEFAULT_TEST_ADMIN_IDENTITY and DEFAULT_TEST_ADMIN_SECRET).

## 7. MAINTENANCE COMMANDS

### View container logs
```bash
# View logs for a specific container
docker compose -f docker-compose.prod.yml logs condo-app
docker compose -f docker-compose.prod.yml logs condo-worker

# Follow logs in real-time
docker compose -f docker-compose.prod.yml logs -f condo-app
```

### Restart containers
```bash
# Restart specific container
docker compose -f docker-compose.prod.yml restart condo-app
docker compose -f docker-compose.prod.yml restart condo-worker

# Restart all containers
docker compose -f docker-compose.prod.yml restart
```

### Update the application
```bash
# Pull latest code
cd /opt/condo
git pull

# Rebuild and restart containers
docker compose -f docker-compose.prod.yml build condo-app condo-worker
docker compose -f docker-compose.prod.yml run --rm condo-app yarn workspace @app/condo build:deps
docker compose -f docker-compose.prod.yml run --rm condo-app yarn workspace @app/condo build
docker compose -f docker-compose.prod.yml run --rm condo-app yarn workspace @app/condo migrate
docker compose -f docker-compose.prod.yml up -d

# Or use the provided script (if you saved init.sh)
./init.sh
```

### Access container shell
```bash
# Get a shell in the app container
docker compose -f docker-compose.prod.yml exec condo-app /bin/bash
```

## 8. BACKUP AND RESTORE

### Set up automatic database backups
Create a backup script:

```bash
nano /opt/condo/docker-backup.sh
```

Add the following content:

```bash
#!/bin/bash
BACKUP_DIR="/opt/condo/backups"
mkdir -p $BACKUP_DIR
DATE=$(date +%Y-%m-%d-%H-%M)

# Backup PostgreSQL database
docker compose -f /opt/condo/docker-compose.prod.yml exec -T postgres pg_dump -U postgres condo > "$BACKUP_DIR/condo-$DATE.sql"

# Keep only last 7 backups
ls -tp $BACKUP_DIR/*.sql | grep -v '/$' | tail -n +8 | xargs -I {} rm -- {}
```

Make it executable and add to cron:

```bash
chmod +x /opt/condo/docker-backup.sh
(crontab -l 2>/dev/null; echo "0 2 * * * /opt/condo/docker-backup.sh") | crontab -
```

### Restore from backup
```bash
# Stop the application containers while keeping the database running
docker compose -f docker-compose.prod.yml stop condo-app condo-worker

# Restore the database
cat /opt/condo/backups/condo-YYYY-MM-DD-HH-MM.sql | docker compose -f docker-compose.prod.yml exec -T postgres psql -U postgres condo

# Start the application containers again
docker compose -f docker-compose.prod.yml start condo-app condo-worker
```

## 9. TROUBLESHOOTING

### If containers don't start properly
Check the logs:
```bash
docker compose -f docker-compose.prod.yml logs condo-app
```

### If database migrations fail
```bash
docker compose -f docker-compose.prod.yml run --rm condo-app yarn workspace @app/condo migrate:unlock
docker compose -f docker-compose.prod.yml run --rm condo-app yarn workspace @app/condo migrate
```

### If you need to reset the database
```bash
docker compose -f docker-compose.prod.yml stop condo-app condo-worker
docker compose -f docker-compose.prod.yml exec postgres psql -U postgres -c "DROP DATABASE condo;"
docker compose -f docker-compose.prod.yml exec postgres psql -U postgres -c "CREATE DATABASE condo;"
docker compose -f docker-compose.prod.yml run --rm condo-app yarn workspace @app/condo migrate
docker compose -f docker-compose.prod.yml start condo-app condo-worker
```

## 10. SECURITY CONSIDERATIONS

### Secure database passwords
Use strong passwords in your `.env` file and consider implementing database encryption at rest.

### Firewall configuration
Configure your firewall to only allow necessary ports:

```bash
sudo apt install -y ufw
sudo ufw allow ssh
sudo ufw allow ${PORT:-3000}/tcp
sudo ufw enable
``` 