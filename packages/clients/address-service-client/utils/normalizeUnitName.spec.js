const { stringOnlyContainsRomanNumbers } = require('./normalizeUnitName')
const  { normalizeUnitName } = require('./normalizeUnitName.js')

const TEST_CASES = {
    ru: [
        [' 1', '1'],
        ['    1', '1'],
        ['1 ', '1'],
        ['1    ', '1'],
        [' 1 ', '1'],
        ['    1   ', '1'],
        ['.1', '1'],
        [',1', '1'],
        ['1.', '1'],
        ['.1.', '1'],
        [',1,', '1'],
        [', .   , 1, ,.   ,.', '1'],
        ['#23', '23'],
        ['#2', '2'],
        ['N°17', '17'],
        ['3-8-13\n', '3-8-13'],
        ['12/2', '12-2'],
        ['LXXVIII', '78'],
        ['VI A', '6-a'],
        ['1 a', '1-a'],
        ['1   a', '1-a'],
        ['1', '1'],
        ['1a', '1-a'],
        ['123asd', '123-asd'],
        ['39/ЖП', '39-zhp'],
        ['39-ЖП', '39-zhp'],
        ['12/A', '12-a'],
        ['410 K.', '410-k'],
        ['кв. 1-a', '1-a'],
        ['кв 1-a', '1-a'],
        ['квартира 1-a', '1-a'],
        ['корпус 1-a', 'korpus-1-a'],
        ['к. 1-a', 'k-1-a'],
        ['к 1-a', 'k-1-a'],
        ['кладовая 1-a', '1-a'],
        ['кл. 1-a', '1-a'],
        ['к/п 4', '4'],
        ['оф 4', '4'],
        ['оф. 4', '4'],
        ['подвал 4', '4'],
        ['м/м 4', '4'],
        ['а/м. 4', '4'],
        ['мм 132', '132'],
        ['кл.кл. 132', '132'],
        ['НП1', '1'],
        ['Н70', 'n-70'],
        ['Ю-122', 'yu-122'],
        ['кв.1', '1'],
        ['кв1', '1'],
        ['к1', 'k-1'],
        ['к/п4', '4'],
        ['АП141', '141'],
        ['Особняк Оксфорд', 'osobnyak-oksford'],
        ['к', 'k'],
        ['нет', 'net'],
        ['0-1', '0-1'],
        ['3-8-13\n', '3-8-13'],
        ['050-2/1', '050-2-1'],
        ['кл.кл. 3 (19Б кв. 14)', '3-19-b-14'],
        ['4 (1 ур.)', '4-1-ur'],
        ['21(кв.30)', '21-30'],
        ['"с4,кв6,7."', 's-4-6-7'],
        ['3-12-15 (933Н)', '3-12-15-933-n'],
        ['-', ''],
        ['37(ЛС 0007000037)', '37-ls-0007000037'],
        ['ежилое помещение 11', 'ezhiloe-11'],
        ['28Н ком.1', '28-n-kom-1'],
        ['х41м001', 'h-41-m-001'],
        ['1₽7', '1-russian-ruble-7'],
        ['I м/м 24', '1-24'],
        ['47;48', '47-48'],
        [')', ''],
        [')))', ''],
        ['*', '*'],
        ['+', '+'],
        [',', ''],
        ['-', ''],
        ['×', '×'],
        ['•', '*'],
        ['…', '..'],
        ['⛔', '⛔'],
        ['(€(', 'euro'],
        ['', ''],
        ['/', ''],
        ['/\n', ''],
        [':)', ':'],
        ['=', '='],
        ['?', '?'],
        [':', ':'],
        ['@', '@'],
        ['XII', '12'],
        ['КЛ88Н', '88-n'],
    ],
    en: [
        ['Apart. VI A', '6-a'],
        ['Apt 5B', '5-b'],
        ['Apartment 12C', '12-c'],
        ['Suite 405', '405'],
        ['Apt. #3D', '3-d'],
        ['Apartment #3C', '3-c'],
        ['Apt C5', 'c-5'],
        ['Ap. 4A', '4-a'],
        ['Apart. 22B', '22-b'],
        ['Flat 2B', '2-b'],
        ['Suite 12', '12'],
        ['#15', '15'],
        ['Flat 3C', '3-c'],
        ['Apt. #7D', '7-d'],
        ['Flat A1', 'a-1'],
        ['FlatA1', 'a-1'],
        ['Apt.#7D', '7-d'],
        ['FlatA2', 'a-2'],
        [' (Apartement #1A)', '1-a'],
    ],
}

describe('normalizeUnitName', () => {

    for (const locale in TEST_CASES) {
        test.each(TEST_CASES[locale])(`Should convert "%s" to "%s" with locale ${locale}`,
            (unitNameRaw, expectedNormalizedUnitName) =>
                expect(normalizeUnitName(unitNameRaw, locale)).toEqual(expectedNormalizedUnitName)
        )
    }

})

describe('allStringIsRomanNumbers', () => {
    test.each([
        ['VXII', true],
        ['asd VXII', false],
        [' (Apartement #1A)', false],
        ['VXII VXII VXII', true],
    ])('Should detect that string "%s" has only roman numbers: %b', 
        (input, expected) => {
            expect(stringOnlyContainsRomanNumbers(input)).toEqual(expected)
        })
})