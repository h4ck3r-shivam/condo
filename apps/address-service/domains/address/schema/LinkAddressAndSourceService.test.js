/**
 * Generated by `createservice address.LinkAddressAndSourceService --type mutations`
 */

const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, expectToThrowGQLErrorToResult } = require('@open-condo/keystone/test.utils')

const { ERRORS } = require('@address-service/domains/address/schema/LinkAddressAndSourceService')
const { AddressSource, linkAddressAndSourceByTestClient, createTestAddress } = require('@address-service/domains/address/utils/testSchema')

describe('LinkAddressAndSourceService', () => {
    test('Should link with tin', async () => {
        const tin = faker.random.numeric(12)
        const source = `${faker.address.city()}${faker.random.alphaNumeric(8)}, ${faker.address.street()}, ${faker.random.alphaNumeric(8)}`
        const admin = await makeLoggedInAdminClient()
        const [{ id: address }] = await createTestAddress(admin)
        const payload = { source, helpers: { tin }, address: { id: address } }
        const [result] = await linkAddressAndSourceByTestClient(admin, payload)
        expect(result).toMatchObject({
            addressSourceId: expect.any(String),
        })
        const addressSource = await AddressSource.getOne(admin, { id: result.addressSourceId })
        expect(addressSource.source).toEqual(expect.stringContaining('|helpers:'))
        expect(addressSource.address.id).toEqual(address)
    })

    test('Should link without tin', async () => {
        const source = `${faker.address.city()}${faker.random.alphaNumeric(8)}, ${faker.address.street()}, ${faker.random.alphaNumeric(8)}`
        const admin = await makeLoggedInAdminClient()
        const [{ id: address }] = await createTestAddress(admin)
        const payload = { source, address: { id: address } }
        const [result] = await linkAddressAndSourceByTestClient(admin, payload)
        expect(result).toMatchObject({
            addressSourceId: expect.any(String),
        })
        const addressSource = await AddressSource.getOne(admin, { id: result.addressSourceId })
        expect(addressSource.source).toEqual(expect.not.stringContaining('|helpers:'))
        expect(addressSource.address.id).toEqual(address)
    })

    test('Should not add the source again', async () => {
        const source = `${faker.address.city()}${faker.random.alphaNumeric(8)}, ${faker.address.street()}, ${faker.random.alphaNumeric(8)}`
        const admin = await makeLoggedInAdminClient()
        const [{ id: address }] = await createTestAddress(admin)
        const payload = { source, address: { id: address } }
        await linkAddressAndSourceByTestClient(admin, payload)
        await expectToThrowGQLErrorToResult(
            async () => await linkAddressAndSourceByTestClient(admin, payload)
            , ERRORS.SAME_SOURCE)
    })

    test('Should parse unit', async () => {
        const source = `${faker.address.street()}, ${faker.random.numeric(3)}, кв. 123`
        const admin = await makeLoggedInAdminClient()
        const [{ id: address }] = await createTestAddress(admin)
        const payload = { source, address: { id: address }, parseUnit: true  }
        const [result] = await linkAddressAndSourceByTestClient(admin, payload)
        expect(result).toMatchObject({
            addressSourceId: expect.any(String),
        })
        const addressSource = await AddressSource.getOne(admin, { id: result.addressSourceId })
        expect(addressSource.source).toEqual(source.slice(0, -9).toLowerCase())
    })

    test('Should not save incorrect address source', async () => {
        const source = `${faker.address.street()} ${faker.random.numeric(3)} кв123`
        const admin = await makeLoggedInAdminClient()
        const [{ id: address }] = await createTestAddress(admin)
        const payload = { source, address: { id: address }, parseUnit: true  }
        await expectToThrowGQLErrorToResult(
            async () => await linkAddressAndSourceByTestClient(admin, payload)
            , ERRORS.INCORRECT_ADDRESS_SOURCE)
    })

    test('Should not save empty strings', async () => {
        const admin = await makeLoggedInAdminClient()
        const source = ''
        const address = ''
        const existSource = `${faker.address.street()} ${faker.random.numeric(3)} кв123`
        const [{ id: existAddress }] = await createTestAddress(admin)
        const payload1 = { source, address: { id: existAddress }, parseUnit: true  }
        await expectToThrowGQLErrorToResult(
            async () => await linkAddressAndSourceByTestClient(admin, payload1)
            , ERRORS.EMPTY_SOURCE)
        const payload2 = { source: existSource, address: { id: address }, parseUnit: true  }
        await expectToThrowGQLErrorToResult(
            async () => await linkAddressAndSourceByTestClient(admin, payload2)
            , ERRORS.EMPTY_ADDRESS)
    })

    test('Should not link unexisting or incorrect address', async () => {
        const admin = await makeLoggedInAdminClient()
        const source = `${faker.address.street()} ${faker.random.numeric(3)} кв123`
        const address = faker.datatype.uuid()
        const payload = { source, address: { id: address } }
        await expectToThrowGQLErrorToResult(
            async () => await linkAddressAndSourceByTestClient(admin, payload)
            , ERRORS.INCORRECT_ADDRESS)
    })
})
