/**
 * Generated by `createschema webhook.WebHook 'name:Text; url:Url; description:Text'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE } = require('@condo/keystone/test.utils')

const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { WebHook, createTestWebHook, updateTestWebHook } = require('@condo/domains/webhook/utils/testSchema')
const { expectToThrowAccessDeniedErrorToObj, expectToThrowAuthenticationErrorToObjects, expectToThrowAuthenticationErrorToObj } = require('@condo/domains/common/utils/testSchema')

describe('WebHook', () => {
    test('user: create WebHook', async () => {
        const client = await makeLoggedInAdminClient()

        const [obj, attrs] = await createTestWebHook(client)
        expect(obj.id).toMatch(UUID_RE)
        expect(obj.dv).toEqual(1)
        expect(obj.sender).toEqual(attrs.sender)
        expect(obj.v).toEqual(1)
        expect(obj.newId).toEqual(null)
        expect(obj.deletedAt).toEqual(null)
        expect(obj.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(obj.createdAt).toMatch(DATETIME_RE)
        expect(obj.updatedAt).toMatch(DATETIME_RE)
        expect(obj.user.id).toEqual(client.user.id)
        expect(obj.url).toEqual(attrs.url)
        expect(obj.name).toEqual(attrs.name)
    })

    test('anonymous: create WebHook', async () => {
        const client = await makeClient()
        const admin = await makeLoggedInAdminClient()
        await expectToThrowAuthenticationErrorToObj(async () => {
            await createTestWebHook(client, { user: { connect: { id: admin.user.id } } })
        })
    })

    test('user: read WebHook', async () => {
        const client = await makeClientWithNewRegisteredAndLoggedInUser()

        const admin = await makeLoggedInAdminClient()
        const [obj, attrs] = await createTestWebHook(admin, { user: { connect: { id: client.user.id } } })

        const objs = await WebHook.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })

        expect(objs).toHaveLength(1)
        expect(objs[0].id).toMatch(obj.id)
        expect(objs[0].dv).toEqual(1)
        expect(objs[0].sender).toEqual(attrs.sender)
        expect(objs[0].v).toEqual(1)
        expect(objs[0].newId).toEqual(null)
        expect(objs[0].deletedAt).toEqual(null)
        expect(objs[0].createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(objs[0].updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(objs[0].createdAt).toMatch(obj.createdAt)
        expect(objs[0].updatedAt).toMatch(obj.updatedAt)
        expect(objs[0].user.id).toEqual(client.user.id)
        expect(objs[0].name).toEqual(attrs.name)
    })

    test('anonymous: read WebHook', async () => {
        const client = await makeClient()

        await expectToThrowAuthenticationErrorToObjects(async () => {
            await WebHook.getAll(client)
        })
    })

    test('user: update WebHook', async () => {
        const client = await makeClientWithNewRegisteredAndLoggedInUser()

        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestWebHook(admin, { user: { connect: { id: client.user.id } } })

        await expectToThrowAccessDeniedErrorToObj(async () => {
            const payload = {}
            await updateTestWebHook(client, objCreated.id, payload)
        })
    })

    test('anonymous: update WebHook', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestWebHook(admin)

        const client = await makeClient()
        await expectToThrowAuthenticationErrorToObj(async () => {
            const payload = {}
            await updateTestWebHook(client, objCreated.id, payload)
        })
    })

    test('user: delete WebHook', async () => {
        const client = await makeClientWithNewRegisteredAndLoggedInUser()

        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestWebHook(admin, { user: { connect: { id: client.user.id } } })

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await WebHook.delete(client, objCreated.id)
        })
    })

    test('anonymous: delete WebHook', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestWebHook(admin)

        const client = await makeClient()
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await WebHook.delete(client, objCreated.id)
        })
    })
})
