/**
 * Generated by `createschema webhook.WebHookSubscription 'webhook:Relationship:WebHook:CASCADE; model:Text;'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE } = require('@condo/keystone/test.utils')

const { WebHookSubscription, createTestWebHookSubscription, updateTestWebHookSubscription, createTestWebHook } = require('@condo/domains/webhook/utils/testSchema')
const { expectToThrowAuthenticationErrorToObj } = require('@condo/domains/common/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { expectToThrowAuthenticationErrorToObjects, expectToThrowAccessDeniedErrorToObj } = require('../../common/utils/testSchema')

describe('WebHookSubscription', () => {
    test('admin: create WebHookSubscription', async () => {
        const client = await makeLoggedInAdminClient()

        const [webhook] = await createTestWebHook(client)
        const [obj, attrs] = await createTestWebHookSubscription(client, webhook, {
            model: 'User',
            filters: { createdAt_gte: '2021-05-12T20:10:48Z' },
            fields: { id: true },
        })
        expect(obj.id).toMatch(UUID_RE)
        expect(obj.dv).toEqual(1)
        expect(obj.sender).toEqual(attrs.sender)
        expect(obj.v).toEqual(1)
        expect(obj.newId).toEqual(null)
        expect(obj.deletedAt).toEqual(null)
        expect(obj.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(obj.createdAt).toMatch(DATETIME_RE)
        expect(obj.updatedAt).toMatch(DATETIME_RE)
        expect(obj.model).toEqual('User')
        expect(obj.filters).toEqual({ createdAt_gte: '2021-05-12T20:10:48Z' })
        expect(obj.fields).toEqual({ id: true })
        expect(obj.lastUpdatedAt).toEqual('2019-12-31T21:00:00.000Z')
        expect(obj.lastUpdatedAtOffset).toEqual(0)
    })

    test('anonymous: create WebHookSubscription', async () => {
        const admin = await makeLoggedInAdminClient()
        const [webhook] = await createTestWebHook(admin)

        const client = await makeClient()
        await expectToThrowAuthenticationErrorToObj(async () => {
            await createTestWebHookSubscription(client, webhook)
        })
    })

    test('user: read WebHookSubscription', async () => {
        const client = await makeClientWithNewRegisteredAndLoggedInUser()

        const admin = await makeLoggedInAdminClient()
        const [webhook1] = await createTestWebHook(admin)
        await createTestWebHookSubscription(admin, webhook1)
        const [webhook] = await createTestWebHook(admin, { user: { connect: { id: client.user.id } } })
        const [obj, attrs] = await createTestWebHookSubscription(admin, webhook)

        const objs = await WebHookSubscription.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })

        expect(objs).toHaveLength(1)
        expect(objs[0].id).toMatch(obj.id)
        expect(objs[0].dv).toEqual(1)
        expect(objs[0].sender).toEqual(attrs.sender)
        expect(objs[0].v).toEqual(1)
        expect(objs[0].newId).toEqual(null)
        expect(objs[0].deletedAt).toEqual(null)
        expect(objs[0].createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(objs[0].updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(objs[0].createdAt).toMatch(obj.createdAt)
        expect(objs[0].updatedAt).toMatch(obj.updatedAt)
    })

    test('anonymous: read WebHookSubscription', async () => {
        const client = await makeClient()

        await expectToThrowAuthenticationErrorToObjects(async () => {
            await WebHookSubscription.getAll(client)
        })
    })

    test('user: update WebHookSubscription', async () => {
        const client = await makeClientWithNewRegisteredAndLoggedInUser()

        const admin = await makeLoggedInAdminClient()
        const [webhook] = await createTestWebHook(admin, { user: { connect: { id: client.user.id } } })
        const [objCreated] = await createTestWebHookSubscription(admin, webhook)

        await expectToThrowAccessDeniedErrorToObj(async () => {
            const payload = {}
            await updateTestWebHookSubscription(client, objCreated.id, payload)
        })
    })

    test('anonymous: update WebHookSubscription', async () => {
        const admin = await makeLoggedInAdminClient()
        const [webhook] = await createTestWebHook(admin, { user: { connect: { id: admin.user.id } } })
        const [objCreated] = await createTestWebHookSubscription(admin, webhook)

        const client = await makeClient()
        await expectToThrowAuthenticationErrorToObj(async () => {
            const payload = {}
            await updateTestWebHookSubscription(client, objCreated.id, payload)
        })
    })

    test('user: delete WebHookSubscription', async () => {
        const client = await makeClientWithNewRegisteredAndLoggedInUser()

        const admin = await makeLoggedInAdminClient()
        const [webhook] = await createTestWebHook(admin, { user: { connect: { id: client.user.id } } })
        const [objCreated] = await createTestWebHookSubscription(admin, webhook)
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await WebHookSubscription.delete(client, objCreated.id)
        })
    })

    test('anonymous: delete WebHookSubscription', async () => {
        const admin = await makeLoggedInAdminClient()
        const [webhook] = await createTestWebHook(admin, { user: { connect: { id: admin.user.id } } })
        const [objCreated] = await createTestWebHookSubscription(admin, webhook)

        const client = await makeClient()
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await WebHookSubscription.delete(client, objCreated.id)
        })
    })
})
