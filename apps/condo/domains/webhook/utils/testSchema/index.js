/**
 * Generated by `createschema webhook.WebHook 'name:Text; url:Url; description:Text'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */
const faker = require('faker')

const { generateServerUtils, execGqlWithoutAccess } = require('@condo/domains/common/utils/codegeneration/generate.server.utils')

const { generateGQLTestUtils, throwIfError } = require('@condo/domains/common/utils/codegeneration/generate.test.utils')

const { WebHook: WebHookGQL } = require('@condo/domains/webhook/gql')
const { WebHookSubscription: WebHookSubscriptionGQL } = require('@condo/domains/webhook/gql')
/* AUTOGENERATE MARKER <IMPORT> */

const WebHook = generateGQLTestUtils(WebHookGQL)
const WebHookSubscription = generateGQLTestUtils(WebHookSubscriptionGQL)
/* AUTOGENERATE MARKER <CONST> */

async function createTestWebHook (client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    const name = faker.random.alphaNumeric(8)
    const url = faker.internet.url()

    const attrs = {
        dv: 1,
        sender,
        name,
        url,
        user: (client.user) ? { connect: { id: client.user.id } } : undefined,
        ...extraAttrs,
    }
    const obj = await WebHook.create(client, attrs)
    return [obj, attrs]
}

async function updateTestWebHook (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await WebHook.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestWebHookSubscription (client, webhook, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!webhook || !webhook.id) throw new Error('no webhook.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    const model = 'User'
    const filters = {}
    const fields = { id: true, updatedAt: true }

    const attrs = {
        dv: 1,
        sender,
        webhook: { connect: { id: webhook.id } },
        model,
        filters,
        fields,
        ...extraAttrs,
    }
    const obj = await WebHookSubscription.create(client, attrs)
    return [obj, attrs]
}

async function updateTestWebHookSubscription (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await WebHookSubscription.update(client, id, attrs)
    return [obj, attrs]
}

/* AUTOGENERATE MARKER <FACTORY> */

module.exports = {
    WebHook, createTestWebHook, updateTestWebHook,
    WebHookSubscription, createTestWebHookSubscription, updateTestWebHookSubscription,
/* AUTOGENERATE MARKER <EXPORTS> */
}
