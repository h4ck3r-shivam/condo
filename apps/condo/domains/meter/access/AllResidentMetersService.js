/**
 * Generated by `createservice meter.AllResidentMetersService`
 */
const { isEmpty } = require('lodash')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find } = require('@open-condo/keystone/schema')

const { RESIDENT } = require('@condo/domains/user/constants/common')

async function canExecuteAllResidentMeters ({ authentication: { item: user }, args: { where: { id: residentId } } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    if (user.type === RESIDENT) {
        const residents = await find('Resident', {
            user: { id: user.id, deletedAt: null },
            id: residentId,
            property: { deletedAt: null },
            organization: { deletedAt: null },
            deletedAt: null,
        })

        return !isEmpty(residents)
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canExecuteAllResidentMeters,
}
