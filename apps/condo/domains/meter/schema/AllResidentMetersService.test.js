/**
 * Generated by `createservice meter.AllResidentMetersService`
 */
const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient, waitFor } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAccessDeniedErrorToResult,
    expectToThrowAuthenticationErrorToResult,
} = require('@open-condo/keystone/test.utils')

const {
    makeContextWithOrganizationAndIntegrationAsAdmin,
    createTestBillingProperty,
    createTestBillingAccount,
} = require('@condo/domains/billing/utils/testSchema')
const {
    COLD_WATER_METER_RESOURCE_ID,
    HOT_WATER_METER_RESOURCE_ID,
    HEAT_SUPPLY_METER_RESOURCE_ID,
} = require('@condo/domains/meter/constants/constants')
const {
    allResidentMetersByTestClient,
    MeterResource,
    createTestMeter,
    MeterResourceOwner,
    updateTestMeterResourceOwner,
} = require('@condo/domains/meter/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { FLAT_UNIT_TYPE } = require('@condo/domains/property/constants/common')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { createTestResident } = require('@condo/domains/resident/utils/testSchema')
const { createTestServiceConsumer } = require('@condo/domains/resident/utils/testSchema')
const {
    makeClientWithSupportUser,
    makeClientWithResidentUser,
    makeClientWithNewRegisteredAndLoggedInUser,
} = require('@condo/domains/user/utils/testSchema')


describe('AllResidentMetersService', () => {
    let admin
    let support
    let user
    let residentClient
    let anonymous

    let resident
    let meter1
    let meter2
    let meter3
    let property

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        user = await makeClientWithNewRegisteredAndLoggedInUser()
        residentClient = await makeClientWithResidentUser()
        anonymous = await makeClient()

        const { organization, context } = await makeContextWithOrganizationAndIntegrationAsAdmin()
        property = (await createTestProperty(admin, organization))[0]
        const [billingProperty] = await createTestBillingProperty(admin, context)
        const [billingAccount] = await createTestBillingAccount(admin, context, billingProperty)
        const unitName = faker.random.alphaNumeric(8)
        resident = (await createTestResident(admin, residentClient.user, property, {
            unitName, unitType: FLAT_UNIT_TYPE,
        }))[0]

        await createTestServiceConsumer(admin, resident, organization, { accountNumber: billingAccount.number })
        const [coldResource] = await MeterResource.getAll(admin, { id: COLD_WATER_METER_RESOURCE_ID })
        const [hotResource] = await MeterResource.getAll(admin, { id: HOT_WATER_METER_RESOURCE_ID })
        const [heatResource] = await MeterResource.getAll(admin, { id: HEAT_SUPPLY_METER_RESOURCE_ID })
        meter1 = (await createTestMeter(admin, organization, property, coldResource, {
            accountNumber: billingAccount.number, unitName, unitType: FLAT_UNIT_TYPE,
        }))[0]
        meter2 = (await createTestMeter(admin, organization, property, hotResource, {
            accountNumber: billingAccount.number, unitName, unitType: FLAT_UNIT_TYPE,
        }))[0]
        meter3 = (await createTestMeter(admin, organization, property, heatResource, {
            accountNumber: billingAccount.number, unitName, unitType: FLAT_UNIT_TYPE,
        }))[0]
    })

    describe('Admin', () => {
        it('should get meters of the resident', async () => {
            const [data] = await allResidentMetersByTestClient(support, { id: resident.id })

            expect(data).toHaveLength(3)
            expect(data.find(meter => meter.id === meter1.id)).toBeDefined()
            expect(data.find(meter => meter.id === meter2.id)).toBeDefined()
            expect(data.find(meter => meter.id === meter3.id)).toBeDefined()
        })
    })

    describe('Support', () => {
        it('should get meters of the resident', async () => {
            const [data] = await allResidentMetersByTestClient(admin, { id: resident.id })

            expect(data).toHaveLength(3)
            expect(data.find(meter => meter.id === meter1.id)).toBeDefined()
            expect(data.find(meter => meter.id === meter2.id)).toBeDefined()
            expect(data.find(meter => meter.id === meter3.id)).toBeDefined()
        })
    })

    describe('User', () => {
        it('can\'t get meters from resident', async () => {
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await allResidentMetersByTestClient(user, { id: resident.id })
            })
        })
    })

    describe('Resident', () => {
        it('should get meters from resident main organization', async () => {
            const { organization, context } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const [property] = await createTestProperty(admin, organization)
            const [billingProperty] = await createTestBillingProperty(admin, context)
            const [billingAccount] = await createTestBillingAccount(admin, context, billingProperty)

            const unitName = faker.random.alphaNumeric(8)
            const unitType = FLAT_UNIT_TYPE

            const [resident] = await createTestResident(admin, residentClient.user, property, { unitName, unitType })
            await createTestServiceConsumer(admin, resident, organization, { accountNumber: billingAccount.number })
            const [resource] = await MeterResource.getAll(residentClient, { id: COLD_WATER_METER_RESOURCE_ID })
            const [meter] = await createTestMeter(admin, organization, property, resource, {
                accountNumber: billingAccount.number, unitName, unitType,
            })

            const [data] = await allResidentMetersByTestClient(residentClient, { id: resident.id })

            expect(data).toBeDefined()
            expect(data).toHaveLength(1)
            expect(data[0]).toHaveProperty('id', meter.id)
        })

        it('should get all meters from organizations with resource ownership rights', async () => {
            const { organization: originalOrganization, context: originalContext } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const { organization: serviceProviderOrganization, context: serviceProviderContext } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const [originalProperty] = await createTestProperty(admin, originalOrganization)
            const [serviceProviderProperty] = await createTestProperty(admin, serviceProviderOrganization, {
                address: originalProperty.address,
            })
            expect(serviceProviderProperty).toHaveProperty('addressKey', originalProperty.addressKey)

            const [originalBillingProperty] = await createTestBillingProperty(admin, originalContext, {
                address: originalProperty.address,
            })
            expect(originalBillingProperty).toHaveProperty('addressKey', originalProperty.addressKey)

            const [serviceProviderBillingProperty] = await createTestBillingProperty(admin, serviceProviderContext, {
                address: serviceProviderProperty.address,
            })
            expect(serviceProviderBillingProperty).toHaveProperty('addressKey', serviceProviderProperty.addressKey)

            const [originalBillingAccount] = await createTestBillingAccount(admin, originalContext, originalBillingProperty)
            const [serviceProviderBillingAccount] = await createTestBillingAccount(admin, serviceProviderContext, serviceProviderBillingProperty)

            const unitName = faker.random.alphaNumeric(8)
            const unitType = FLAT_UNIT_TYPE

            const [resident] = await createTestResident(admin, residentClient.user, originalProperty, { unitName, unitType })
            await createTestServiceConsumer(admin, resident, originalOrganization, { accountNumber: originalBillingAccount.number })
            await createTestServiceConsumer(admin, resident, serviceProviderOrganization, { accountNumber: serviceProviderBillingAccount.number })

            const coldWaterResource = await MeterResource.getOne(residentClient, { id: COLD_WATER_METER_RESOURCE_ID })
            const hotWaterResource = await MeterResource.getOne(residentClient, { id: HOT_WATER_METER_RESOURCE_ID })
            const [hotMeter] = await createTestMeter(admin, originalOrganization, originalProperty, hotWaterResource, {
                accountNumber: originalBillingAccount.number, unitName, unitType,
            })

            await waitFor(async () => {
                const meterResourceOwner = await MeterResourceOwner.getOne(admin, {
                    address_i: resident.address, resource: { id: HOT_WATER_METER_RESOURCE_ID },
                })

                expect(meterResourceOwner).toBeDefined()
            })

            const [coldMeter] = await createTestMeter(admin, originalOrganization, originalProperty, coldWaterResource, {
                accountNumber: originalBillingAccount.number, unitName, unitType,
            })

            await waitFor(async () => {
                const meterResourceOwner = await MeterResourceOwner.getOne(admin, {
                    address_i: resident.address, resource: { id: COLD_WATER_METER_RESOURCE_ID },
                })

                expect(meterResourceOwner).toBeDefined()
            })

            const [data] = await allResidentMetersByTestClient(residentClient, { id: resident.id })

            expect(data).toHaveLength(2)
            const foundHotMeter = data.find(meter => meter.id === hotMeter.id)
            const foundColdMeter = data.find(meter => meter.id === coldMeter.id)
            expect(foundHotMeter).toBeDefined()
            expect(foundHotMeter).toHaveProperty(['resource', 'id'], hotMeter.resource.id)
            expect(foundHotMeter).toHaveProperty(['organization', 'id'], hotMeter.organization.id)
            expect(foundHotMeter).toHaveProperty(['property', 'id'], hotMeter.property.id)
            expect(foundColdMeter).toBeDefined()
            expect(foundColdMeter).toHaveProperty(['resource', 'id'], coldMeter.resource.id)
            expect(foundColdMeter).toHaveProperty(['organization', 'id'], coldMeter.organization.id)
            expect(foundColdMeter).toHaveProperty(['property', 'id'], coldMeter.property.id)

            const coldMeterResourceOwner = await MeterResourceOwner.getOne(admin, {
                resource: { id: COLD_WATER_METER_RESOURCE_ID }, address_i: resident.address,
            })

            await updateTestMeterResourceOwner(admin, coldMeterResourceOwner.id, {
                organization: { connect: { id: serviceProviderOrganization.id } },
            })
            const [serviceProviderColdMeter] = await createTestMeter(admin, serviceProviderOrganization, serviceProviderProperty, coldWaterResource, {
                accountNumber: serviceProviderBillingAccount.number, unitName, unitType,
            })

            expect(serviceProviderColdMeter).toHaveProperty(['property', 'id'], serviceProviderProperty.id)

            const [updatedData] = await allResidentMetersByTestClient(residentClient, { id: resident.id })

            expect(updatedData).toHaveLength(2)

            const originalHotMeter = updatedData.find(meter => meter.id === hotMeter.id)
            const newMeter = updatedData.find(meter => meter.id === serviceProviderColdMeter.id)

            expect(originalHotMeter).toBeDefined()
            expect(originalHotMeter).toHaveProperty('id', hotMeter.id)
            expect(originalHotMeter).toHaveProperty(['organization', 'id'], hotMeter.organization.id)
            expect(newMeter).toBeDefined()
            expect(newMeter).toHaveProperty(['property', 'id'], serviceProviderProperty.id)
            expect(newMeter).toHaveProperty(['organization', 'id'], serviceProviderOrganization.id)
            expect(newMeter).toHaveProperty(['resource', 'id'], coldWaterResource.id)
        })

        it('can\'t get meters by another resident', async () => {
            const client = await makeClientWithResidentUser()

            const [organization] = await createTestOrganization(admin)
            const [property] = await createTestProperty(admin, organization)

            const unitName = faker.random.alphaNumeric(8)

            const [resident] = await createTestResident(admin, client.user, property, { unitName, unitType: FLAT_UNIT_TYPE })

            await expectToThrowAccessDeniedErrorToResult(async () => {
                await allResidentMetersByTestClient(residentClient, { id: resident.id })
            })
        })
    })

    describe('Anonymous', () => {
        it('can\'t get any data', async () => {
            await expectToThrowAuthenticationErrorToResult(async () => {
                await allResidentMetersByTestClient(anonymous, { id: resident.id })
            })
        })
    })

    describe('Sorting', () => {
        it('should be able to use skip and first arguments', async () => {
            const [startFromFirstData] = await allResidentMetersByTestClient(admin, { id: resident.id }, 1)

            expect(startFromFirstData).toHaveLength(1)
            expect(startFromFirstData[0].id).toEqual(meter1.id)

            const [skipOneData] = await allResidentMetersByTestClient(admin, { id: resident.id }, 2, 1)

            expect(skipOneData).toHaveLength(2)
            expect(skipOneData.find(meter => meter.id === meter1.id)).not.toBeDefined()
            expect(skipOneData[0].id).toEqual(meter2.id)
            expect(skipOneData[1].id).toEqual(meter3.id)
        })

        it('should ignore negative values', async () => {
            const [data] = await allResidentMetersByTestClient(
                admin, { id: resident.id }, faker.datatype.number({ max: 0, min: -10 }), faker.datatype.number({ max: 0, min: -10 })
            )

            expect(data).toHaveLength(3)
        })
    })
})
