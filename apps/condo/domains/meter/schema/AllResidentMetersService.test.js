/**
 * Generated by `createservice meter.AllResidentMetersService`
 */
const { faker } = require('@faker-js/faker')


const { makeLoggedInAdminClient, makeClient, waitFor } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAccessDeniedErrorToResult,
    expectToThrowAuthenticationErrorToResult,
} = require('@open-condo/keystone/test.utils')

const {
    makeContextWithOrganizationAndIntegrationAsAdmin,
    createTestBillingProperty,
    createTestBillingAccount,
} = require('@condo/domains/billing/utils/testSchema')
const {
    allResidentMetersByTestClient,
    MeterResource,
    createTestMeter,
    MeterResourceOwner,
    updateTestMeterResourceOwner,
} = require('@condo/domains/meter/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { FLAT_UNIT_TYPE } = require('@condo/domains/property/constants/common')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { createTestResident } = require('@condo/domains/resident/utils/testSchema')
const { createTestServiceConsumer } = require('@condo/domains/resident/utils/testSchema')
const {
    makeClientWithSupportUser,
    makeClientWithResidentUser,
    makeClientWithStaffUser,
} = require('@condo/domains/user/utils/testSchema')

const { COLD_WATER_METER_RESOURCE_ID, HOT_WATER_METER_RESOURCE_ID } = require('../constants/constants')


describe('AllResidentMetersService', () => {
    let admin
    let residentClient

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        residentClient = await makeClientWithResidentUser()
    })

    describe('Resident', () => {
        it('should get meters from resident main organization', async () => {
            const { organization, context } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const [property] = await createTestProperty(admin, organization)
            const [billingProperty] = await createTestBillingProperty(admin, context)
            const [billingAccount] = await createTestBillingAccount(admin, context, billingProperty)

            const unitName = faker.random.alphaNumeric(8)
            const unitType = FLAT_UNIT_TYPE

            const [resident] = await createTestResident(admin, residentClient.user, property, { unitName, unitType })
            await createTestServiceConsumer(admin, resident, organization, { accountNumber: billingAccount.number })
            const [resource] = await MeterResource.getAll(residentClient, { id: COLD_WATER_METER_RESOURCE_ID })
            const [meter] = await createTestMeter(admin, organization, property, resource, {
                accountNumber: billingAccount.number, unitName, unitType,
            })

            const [data] = await allResidentMetersByTestClient(residentClient, { id: resident.id })

            expect(data).toBeDefined()
            expect(data).toHaveLength(1)
            // expect(data).toHaveProperty('meters')
            // expect(data.meters).toHaveLength(1)
            expect(data).toEqual(
                expect.arrayContaining([
                    expect.objectContaining(meter),
                ]),
            )
        })

        it('should get all meters from organizations with resource ownership rights', async () => {
            const { organization: originalOrganization, context: originalContext } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const { organization: serviceProviderOrganization, context: serviceProviderContext } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const [originalProperty] = await createTestProperty(admin, originalOrganization)
            const [serviceProviderProperty] = await createTestProperty(admin, serviceProviderOrganization, {
                address: originalProperty.address,
            })
            expect(serviceProviderProperty).toHaveProperty('addressKey', originalProperty.addressKey)

            const [originalBillingProperty] = await createTestBillingProperty(admin, originalContext, {
                address: originalProperty.address,
            })
            expect(originalBillingProperty).toHaveProperty('addressKey', originalProperty.addressKey)

            const [serviceProviderBillingProperty] = await createTestBillingProperty(admin, serviceProviderContext, {
                address: serviceProviderProperty.address,
            })
            expect(serviceProviderBillingProperty).toHaveProperty('addressKey', serviceProviderProperty.addressKey)

            const [originalBillingAccount] = await createTestBillingAccount(admin, originalContext, originalBillingProperty)
            const [serviceProviderBillingAccount] = await createTestBillingAccount(admin, serviceProviderContext, serviceProviderBillingProperty)

            const unitName = faker.random.alphaNumeric(8)
            const unitType = FLAT_UNIT_TYPE

            const [resident] = await createTestResident(admin, residentClient.user, originalProperty, { unitName, unitType })
            await createTestServiceConsumer(admin, resident, originalOrganization, { accountNumber: originalBillingAccount.number })
            // const [serviceProviderResident] = await createTestResident(admin, residentClient.user, serviceProviderProperty, { unitName, unitType })
            await createTestServiceConsumer(admin, resident, serviceProviderOrganization, { accountNumber: serviceProviderBillingAccount.number })

            const coldWaterResource = await MeterResource.getOne(residentClient, { id: COLD_WATER_METER_RESOURCE_ID })
            const hotWaterResource = await MeterResource.getOne(residentClient, { id: HOT_WATER_METER_RESOURCE_ID })
            const [hotMeter] = await createTestMeter(admin, originalOrganization, originalProperty, hotWaterResource, {
                accountNumber: originalBillingAccount.number, unitName, unitType,
            })

            await waitFor(async () => {
                const meterResourceOwner = await MeterResourceOwner.getOne(admin, {
                    address_i: resident.address, resource: { id: HOT_WATER_METER_RESOURCE_ID },
                })

                expect(meterResourceOwner).toBeDefined()
            })

            const [coldMeter] = await createTestMeter(admin, originalOrganization, originalProperty, coldWaterResource, {
                accountNumber: originalBillingAccount.number, unitName, unitType,
            })

            await waitFor(async () => {
                const meterResourceOwner = await MeterResourceOwner.getOne(admin, {
                    address_i: resident.address, resource: { id: COLD_WATER_METER_RESOURCE_ID },
                })

                expect(meterResourceOwner).toBeDefined()
            })

            const [data] = await allResidentMetersByTestClient(residentClient, { where: { id: resident.id } })

            expect(data).toHaveProperty('meters')
            expect(data.meters).toHaveLength(2)
            expect(data.meters).toEqual(
                expect.arrayContaining([
                    expect.objectContaining(hotMeter),
                    expect.objectContaining(coldMeter),
                ])
            )

            const coldMeterResourceOwner = await MeterResourceOwner.getOne(admin, {
                resource: { id: COLD_WATER_METER_RESOURCE_ID }, address_i: resident.address,
            })

            await updateTestMeterResourceOwner(admin, coldMeterResourceOwner.id, {
                organization: { connect: { id: serviceProviderOrganization.id } },
            })
            const [serviceProviderColdMeter] = await createTestMeter(admin, serviceProviderOrganization, serviceProviderProperty, coldWaterResource, {
                accountNumber: serviceProviderBillingAccount.number, unitName, unitType,
            })

            expect(serviceProviderColdMeter).toHaveProperty(['property', 'id'], serviceProviderProperty.id)

            const [updatedData] = await allResidentMetersByTestClient(residentClient, { where: { id: resident.id } })

            console.log('hotMeter id', hotMeter.id)
            console.log('coldMeter id', coldMeter.id)
            console.log('spColdMeter id', serviceProviderColdMeter.id)
            console.log('updated data with ids ', updatedData.meters.map(e => e.id))

            expect(updatedData).toHaveProperty('meters')
            expect(updatedData.meters).toHaveLength(2)
            const newMeter = updatedData.meters.find(m => m.id === serviceProviderColdMeter.id)
            // TODO: fix access for property to resident. Now it returns null from custom query
            expect(newMeter.property).not.toBeNull()
            expect(updatedData.meters).toEqual(
                expect.arrayContaining([
                    expect.objectContaining(hotMeter),
                    expect.objectContaining(serviceProviderColdMeter),
                ])
            )

            // expect(updatedData.meters).toEqual(
            //     expect.arrayContaining([
            //         expect.objectContaining(serviceProviderColdMeter),
            //     ])
            // )

        })

        it('can\'t get meters by another resident', async () => {
            const client = await makeClientWithResidentUser()

            const [organization] = await createTestOrganization(admin)
            const [property] = await createTestProperty(admin, organization)

            const unitName = faker.random.alphaNumeric(8)

            const [resident] = await createTestResident(admin, client.user, property, { unitName, unitType: FLAT_UNIT_TYPE })

            await expectToThrowAccessDeniedErrorToResult(async () => {
                await allResidentMetersByTestClient(residentClient, { where: { id: resident.id } })
            })
        })
    })

    test('user: execute', async () => {
        const client = await makeClient()  // TODO(codegen): use truly useful client!
        const payload = {}  // TODO(codegen): change the 'user: update AllResidentMetersService' payload
        const [data, attrs] = await allResidentMetersByTestClient(client, payload)
        // TODO(codegen): write user expect logic
        throw new Error('Not implemented yet')
    })

    test('anonymous: execute', async () => {
        const client = await makeClient()
        await expectToThrowAuthenticationErrorToResult(async () => {
            await allResidentMetersByTestClient(client)
        })
    })

    test('admin: execute', async () => {
        const admin = await makeLoggedInAdminClient()
        const payload = {}  // TODO(codegen): change the 'user: update AllResidentMetersService' payload
        const [data, attrs] = await allResidentMetersByTestClient(admin, payload)
        // TODO(codegen): write admin expect logic
        throw new Error('Not implemented yet')
    })
})
