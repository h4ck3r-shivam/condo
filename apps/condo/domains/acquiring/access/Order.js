/**
 * Generated by `createschema acquiring.Order 'property:Relationship:Property:PROTECT'`
 */

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')

const { RESIDENT } = require('@condo/domains/user/constants/common')

async function canReadOrders ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.type === RESIDENT) return {}

    return false
}

async function canManageOrders ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.type === RESIDENT) return true

    return false
}

async function canReadSensitiveOrderData ({ authentication: { item: user } }) {
    return user.type !== RESIDENT
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadOrders,
    canManageOrders,
    canReadSensitiveOrderData,
}
