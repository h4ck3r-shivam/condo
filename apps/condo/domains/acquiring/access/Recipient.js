// @ts-nocheck
/**
 * Generated by `createschema acquiring.Recipient 'organization:Relationship:Organization:CASCADE; tin:Text; iec:Text; bic:Text; bankAccount:Text; bankName?:Text; offsettingAccount?:Text; territoryCode?:Text; purpose?Text; name?:Text; isApproved:Checkbox; meta?:Json;'`
 */

const { get } = require('lodash')
const { throwAuthenticationError } = require('@condo/domains/common/utils/apolloErrorFormatter')

async function canReadRecipients ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return {}

    //Проверить логику что человек из организации
    return false
}

async function canManageRecipients ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true


    //Нужна логика для добавления ресипиентов через RECEIPT
    if (operation === 'create') {
        return false
    } else if (operation === 'update') {
        // TODO(codegen): write canManageRecipients update logic!
        return false
    }

    return false
}

async function canManageIsApprovedField ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (user.isAdmin || user.isSupport) return true

    // If user is not support, then he only can drop isApproved field
    if (!get(originalInput, 'isApproved')) {
        return true
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadRecipients,
    canManageRecipients,
    canManageIsApprovedField,
}
