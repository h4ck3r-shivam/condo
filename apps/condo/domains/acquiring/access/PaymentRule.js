// @ts-nocheck
/**
 * Generated by `createschema acquiring.PaymentRule 'context:Relationship:AcquiringIntegrationContext:PROTECT;explicitFee?:Decimal;explicitServiceCharge?:Decimal;implicitFee?:Decimal;bankAccount?:Relationship:BankAccount:PROTECT;marketPlaceScope?:Relationship:PaymentRuleMarketPlaceScope:PROTECT;billingScope?:Relationship:PaymentRuleBillingScope:PROTECT'`
 */

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')

async function canReadPaymentRules ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    return user.isAdmin || user.isSupport
}

async function canManagePaymentRules ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    return user.isAdmin || user.isSupport
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadPaymentRules,
    canManagePaymentRules,
}
