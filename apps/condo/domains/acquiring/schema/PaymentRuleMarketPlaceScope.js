/**
 * Generated by `createschema acquiring.PaymentRuleMarketPlaceScope 'property?:Relationship:Property:PROTECT;'`
 */

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { addressService } = require('@open-condo/keystone/plugins/addressService')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/acquiring/access/PaymentRuleMarketPlaceScope')


const PaymentRuleMarketPlaceScope = new GQLListSchema('PaymentRuleMarketPlaceScope', {
    schemaDoc: 'Conditions to match paymentRule with the marketplace invoices',
    fields: {

        paymentRule: {
            schemaDoc: 'Payment rule to apply if market place invoice matches the scope',
            type: 'Relationship',
            ref: 'PaymentRule',
            kmigratorOptions: { null: false, on_delete: 'models.PROTECT' },
        },

        property: {
            schemaDoc: 'Address restrictions',
            type: 'Relationship',
            ref: 'Property',
            kmigratorOptions: { null: true, on_delete: 'models.PROTECT' },
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadPaymentRuleMarketPlaceScopes,
        create: access.canManagePaymentRuleMarketPlaceScopes,
        update: access.canManagePaymentRuleMarketPlaceScopes,
        delete: false,
        auth: true,
    },
})

module.exports = {
    PaymentRuleMarketPlaceScope,
}
