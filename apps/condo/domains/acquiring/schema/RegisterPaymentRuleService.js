/**
 * Generated by `createservice acquiring.RegisterPaymentRuleService '--type=mutations'`
 */

const { GQLError } = require('@open-condo/keystone/errors')
const { GQLCustomSchema, find, getByCondition, getById } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/acquiring/access/RegisterPaymentRuleService')
const { ERRORS } = require('@condo/domains/acquiring/constants/registerPaymentRule')
const {
    PaymentRule: PaymentRuleApi,
    PaymentRuleBillingScope: PaymentRuleBillingScopeApi,
    PaymentRuleMarketPlaceScope: PaymentRuleMarketPlaceScopeApi,
} = require('@condo/domains/acquiring/utils/serverSchema')
const { syncBankAccount } = require('@condo/domains/acquiring/utils/serverSchema/utils')

const RegisterPaymentRuleService = new GQLCustomSchema('RegisterPaymentRuleService', {
    types: [
        {
            access: true,
            type: 'input RegisterPaymentRuleBankAccountInput { tin: String!, routingNumber: String!, number: String! }',
        },
        {
            access: true,
            type: 'input RegisterPaymentRuleFeeSettingsInput { explicitFee: String, explicitServiceCharge: String, implicitFee: String, minFeeAmount: String, maxFeeAmount: String, merchant: String }',
        },
        {
            access: true,
            type: 'input RegisterPaymentRuleMarketPlaceScopeInput { address: String }',
        },
        {
            access: true,
            type: 'input RegisterPaymentRuleBillingScopeInput { address: String, category: BillingCategoryRelateToOneInput, bankAccountNumber: String, serviceIds: JSON }',
        },
        {
            access: true,
            type: 'input RegisterPaymentRuleInput { dv: Int!, sender: SenderFieldInput!, acquiringIntegrationContext: AcquiringIntegrationContextWhereUniqueInput!, fee: RegisterPaymentRuleFeeSettingsInput!, bankAccount: RegisterPaymentRuleBankAccountInput, marketPlaceScope: RegisterPaymentRuleMarketPlaceScopeInput, billingScope: RegisterPaymentRuleBillingScopeInput }',
        },
    ],
    mutations: [
        {
            access: access.canRegisterPaymentRule,
            schema: 'registerPaymentRule(data: RegisterPaymentRuleInput!): PaymentRule',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data } = args
                const {
                    dv, sender,
                    acquiringIntegrationContext: acquiringIntegrationContextWhereUniqueInput,
                    fee, bankAccount,
                    marketPlaceScope: marketPlaceScopeCreateInput,
                    billingScope: billingScopeCreateInput,
                } = data
                const acquiringContext = await getByCondition('AcquiringIntegrationContext', acquiringIntegrationContextWhereUniqueInput)
                if (!acquiringContext || acquiringContext.deletedAt || acquiringContext.status !== 'Finished') {
                    throw new GQLError(ERRORS.ACQUIRING_CONTEXT_CHECK_FAILED, context)
                }
                const organizationId = acquiringContext.organization
                const paymentRuleBankAccount = bankAccount ? await syncBankAccount(context, {
                    dv, sender,
                    ...bankAccount,
                    organizationId,
                }) : null
                let [paymentRule] = await find('PaymentRule', {
                    context: { id: acquiringContext.id },
                    ...paymentRuleBankAccount ? { bankAccount: { id: paymentRuleBankAccount.id } } : {},
                    ...fee ? fee : {},
                    deletedAt: null,
                })
                if (!paymentRule) {
                    paymentRule = await PaymentRuleApi.create(context, {
                        dv, sender, context: { connect: { id: acquiringContext.id } }, ...fee,
                        ...paymentRuleBankAccount ? { bankAccount: { connect: { id: paymentRuleBankAccount.id } } }  : {},
                    })
                }
                if (billingScopeCreateInput) {
                    const [currentScope] = await find('PaymentRuleBillingScope', {
                        deletedAt: null,
                        paymentRule: { context: { id: acquiringContext.id } },
                        ...billingScopeCreateInput,
                    })
                    if (currentScope) {
                        if (currentScope.paymentRule !== paymentRule.id) {
                            throw new GQLError(ERRORS.DUPLICATE_BILLING_SCOPE, context)
                        }
                    } else {
                        await PaymentRuleBillingScopeApi.create(context, {
                            dv, sender, ...billingScopeCreateInput, paymentRule: { connect: { id: paymentRule.id } },
                        })
                    }
                }
                if (marketPlaceScopeCreateInput) {
                    const [currentScope] = await find('PaymentRuleMarketPlaceScope', {
                        deletedAt: null,
                        paymentRule: { context: { id: acquiringContext.id } },
                        ...marketPlaceScopeCreateInput,
                    })
                    if (currentScope) {
                        if (currentScope.paymentRule !== paymentRule.id) {
                            throw new GQLError(ERRORS.DUPLICATE_MARKET_PLACE_SCOPE, context)
                        }
                    } else {
                        await PaymentRuleMarketPlaceScopeApi.create(context, {
                            dv, sender, ...marketPlaceScopeCreateInput, paymentRule: { connect: { id: paymentRule.id } },
                        })
                    }
                }
                return getById('PaymentRule', paymentRule.id)
            },
        },
    ],
    
})

module.exports = {
    RegisterPaymentRuleService,
}
