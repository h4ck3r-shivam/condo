/**
 * Generated by `createservice acquiring.RegisterPaymentRuleService '--type=mutations'`
 */

const { getOrganizationInfo, getBankInfo } = require('@open-condo/clients/finance-info-client')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT, INTERNAL_ERROR } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema, find, getByCondition, getById } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/acquiring/access/RegisterPaymentRuleService')
const {
    PaymentRule: PaymentRuleApi,
    PaymentRuleBillingScope: PaymentRuleBillingScopeApi,
    PaymentRuleMarketPlaceScope: PaymentRuleMarketPlaceScopeApi,
} = require('@condo/domains/acquiring/utils/serverSchema')
const { BankAccount: BankAccountApi } = require('@condo/domains/banking/utils/serverSchema')
const { DEFAULT_CURRENCY_CODE } = require('@condo/domains/common/constants/currencies')
const { NOT_FOUND } = require('@condo/domains/common/constants/errors')

/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const ERRORS = {
    NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY: { mutation: 'registerPaymentRule',
        variable: ['data', 'someVar'], // TODO(codegen): Provide path to a query/mutation variable, whose value caused this error. Remove this property, if variables are not relevant to this error
        code: BAD_USER_INPUT, // TODO(codegen): use one of the basic codes, declared in '@open-condo/keystone/errors'
        type: NOT_FOUND, // TODO(codegen): use value from `constants/errors.js` either from 'common' or current domain
        message: 'Describe what happened for developer',
        messageForUser: 'api.user.registerPaymentRule.NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY', // TODO(codegen): localized message for user, use translation files
    },
}


const RegisterPaymentRuleService = new GQLCustomSchema('RegisterPaymentRuleService', {
    types: [
        {
            access: true,
            type: 'input RegisterPaymentRuleBankAccountInput { tin: String!, routingNumber: String!, number: String! }',
        },
        {
            access: true,
            type: 'input RegisterPaymentRuleFeeSettingsInput {  explicitFee: String, explicitServiceCharge: String, implicitFee: String, minFeeAmount: String, maxFeeAmount: String, merchant: String }',
        },
        {
            access: true,
            type: 'input RegisterPaymentRuleInput { dv: Int!, sender: SenderFieldInput!, acquiringIntegrationContext: AcquiringIntegrationContextWhereUniqueInput!, fee: RegisterPaymentRuleFeeSettingsInput!, bankAccount: RegisterPaymentRuleBankAccountInput, marketPlaceScope: PaymentRuleMarketPlaceScopeCreateInput, billingScope: PaymentRuleBillingScopeCreateInput }',
        },

    ],
    
    mutations: [
        {
            access: access.canRegisterPaymentRule,
            schema: 'registerPaymentRule(data: RegisterPaymentRuleInput!): PaymentRule',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data } = args
                const {
                    dv,
                    sender,
                    acquiringIntegrationContext: acquiringIntegrationContextWhereUniqueInput,
                    fee,
                    bankAccount,
                    marketPlaceScope: marketPlaceScopeCreateInput,
                    billingScope: billingScopeCreateInput,
                } = data
                const acquiringContext = await getByCondition('AcquiringIntegrationContext', acquiringIntegrationContextWhereUniqueInput)
                if (!acquiringContext || acquiringContext.deletedAt || acquiringContext.status !== 'Finished') {
                    throw new Error('BAD CONTEXT')
                }
                const organizationId = acquiringContext.organization
                const paymentRuleCreateInput = { dv, sender, context: { connect: { id: acquiringContext.id } }, ...fee }
                if (bankAccount) {
                    const { tin, routingNumber, number } = bankAccount
                    let [organizationBankAccount] = await find('BankAccount', { tin, routingNumber, number, organization: { id: organizationId }, deletedAt: null })
                    if (!organizationBankAccount) {
                        const { error: getOrganizationInfoError, result: { country, name } } = await getOrganizationInfo(tin)
                        if (getOrganizationInfoError) {
                            throw new Error('getOrganizationInfoError')
                        }
                        const { error: getBankInfoError, result: { bankName, offsettingAccount } } = await getBankInfo(routingNumber)
                        if (getBankInfoError) {
                            throw new Error('getBankInfoError')
                        }
                        organizationBankAccount = await BankAccountApi.create(context, {
                            dv, sender, organization: { connect: { id: organizationId } }, name, routingNumber, number, offsettingAccount, bankName, tin, country, currencyCode: DEFAULT_CURRENCY_CODE,
                        })
                    }
                    paymentRuleCreateInput.bankAccount = { connect: { id: organizationBankAccount.id } }
                }
                if (billingScopeCreateInput) {
                    const newBillingScope = await PaymentRuleBillingScopeApi.create(context, {
                        dv, sender, ...billingScopeCreateInput,
                    })
                    paymentRuleCreateInput.billingScope = { connect: { id: newBillingScope.id } }
                }
                if (marketPlaceScopeCreateInput) {
                    const newMarketPlaceScope = await PaymentRuleMarketPlaceScopeApi.create(context, {
                        dv, sender, ...marketPlaceScopeCreateInput,
                    })
                    paymentRuleCreateInput.marketPlaceScope = { connect: { id: newMarketPlaceScope.id } }
                }
                const paymentRule = await PaymentRuleApi.create(context, paymentRuleCreateInput)
                return getById('PaymentRule', paymentRule.id)
            },
        },
    ],
    
})

module.exports = {
    RegisterPaymentRuleService,
}
