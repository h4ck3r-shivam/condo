/**
 * Generated by `createschema acquiring.Order 'ticket:Relationship:Ticket:PROTECT'`
 */

const { Text, Relationship } = require('@keystonejs/fields')

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/acquiring/access/Order')
const { SERVICES_FIELD } = require('@condo/domains/billing/schema/fields/BillingReceipt/Services')
const { TO_PAY_DETAILS_FIELD } = require('@condo/domains/billing/schema/fields/BillingReceipt/ToPayDetailsField')
const { UNIT_TYPE_FIELD, MONEY_AMOUNT_FIELD } = require('@condo/domains/common/schema/fields')

const Order = new GQLListSchema('Order', {
    schemaDoc: 'Document for one time paid order with list of services',
    fields: {

        context: {
            schemaDoc: 'Acquiring context for organization that executes the paid Order',
            type: Relationship,
            ref: 'AcquiringIntegrationContext',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        ticket: {
            schemaDoc: 'Ticket this Order is based on',
            type: Relationship,
            ref: 'Ticket',
            isRequired: false,
            access: { read: access.canReadSensitiveOrderData },
        },

        unitName: {
            schemaDoc: 'Flat number / door number of an apartment building (property)',
            type: Text,
            isRequired: true,
        },

        unitType: {
            ...UNIT_TYPE_FIELD,
            isRequired: true,
        },

        accountNumber: {
            schemaDoc: 'Account number of the resident who placed an Order',
            type: Text,
            isRequired: false,
        },

        toPay: {
            ...MONEY_AMOUNT_FIELD,
            schemaDoc: 'Total sum to pay. Usually counts as the sum of all services.',
            isRequired: true,
        },

        toPayDetails: TO_PAY_DETAILS_FIELD,

        services: SERVICES_FIELD,

        number: {
            schemaDoc: 'Order number',
            type: Text,
            isRequired: true,
        },

        receiver: {
            schemaDoc: 'Relation to the BillingRecipient',
            type: Relationship,
            ref: 'BillingRecipient',
            isRequired: true,
            knexOptions: { isNotNullable: true },
            kmigratorOptions: { null: false, on_delete: 'models.PROTECT' },
            defaultValue: null,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadOrders,
        create: access.canManageOrders,
        update: access.canManageOrders,
        delete: false,
        auth: true,
    },
})

module.exports = {
    Order,
}
