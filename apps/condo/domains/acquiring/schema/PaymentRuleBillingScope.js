/**
 * Generated by `createschema acquiring.PaymentRuleBillingScope 'property?:Relationship:Property:PROTECT;category?:Relationship:BillingCategory:PROTECT;bankAccountNumber?:Text;serviceId?:Text'`
 */

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { addressService } = require('@open-condo/keystone/plugins/addressService')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/acquiring/access/PaymentRuleBillingScope')


const PaymentRuleBillingScope = new GQLListSchema('PaymentRuleBillingScope', {
    schemaDoc: 'Conditions to match paymentRule with billing receipts',
    fields: {

        category: {
            schemaDoc: 'Determinate if payment rule is working on the specific billing category',
            type: 'Relationship',
            ref: 'BillingCategory',
            kmigratorOptions: { null: true, on_delete: 'models.PROTECT' },
        },

        bankAccountNumber: {
            schemaDoc: 'Defines that the payment rule works only for the specific bank account from the billing receipt',
            type: 'Text',
            isRequired: false,
        },

        serviceIds: {
            schemaDoc: 'Additional payment split according to the services in the billing receipt',
            type: 'Json',
            isRequired: false,
        },

    },
    plugins: [uuided(), addressService(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadPaymentRuleBillingScopes,
        create: access.canManagePaymentRuleBillingScopes,
        update: access.canManagePaymentRuleBillingScopes,
        delete: false,
        auth: true,
    },
})

module.exports = {
    PaymentRuleBillingScope,
}
