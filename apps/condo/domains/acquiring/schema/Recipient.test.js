/**
 * Generated by `createschema acquiring.Recipient 'organization:Relationship:Organization:CASCADE; tin:Text; iec:Text; bic:Text; bankAccount:Text; bankName?:Text; offsettingAccount?:Text; territoryCode?:Text; purpose?Text; name?:Text; isApproved:Checkbox; meta?:Json;
'`
 */

const { makeLoggedInAdminClient, makeClient } = require('@core/keystone/test.utils')

const {
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@condo/domains/common/utils/testSchema')

const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')

const {
    Recipient,
    createTestRecipient,
    updateTestRecipient,
} = require('@condo/domains/acquiring/utils/testSchema')

const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { catchErrorFrom } = require('@condo/domains/common/utils/testSchema')

describe('Recipient', () => {
    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(admin)

                const [recipient] = await createTestRecipient(admin, organization)

                expect(recipient.importId).toBeDefined()
                expect(recipient.tin).toBeDefined()
                expect(recipient.iec).toBeDefined()
                expect(recipient.bic).toBeDefined()
                expect(recipient.bankAccount).toBeDefined()
                expect(recipient.name).toBeDefined()
                expect(recipient.isApproved).toBeDefined()
                expect(recipient.meta).toBeDefined()
            })

            test('support can', async () => {
                const support = await makeClientWithSupportUser()

                const [organization] = await createTestOrganization(support)

                const [recipient] = await createTestRecipient(support, organization)

                expect(recipient.importId).toBeDefined()
                expect(recipient.tin).toBeDefined()
                expect(recipient.iec).toBeDefined()
                expect(recipient.bic).toBeDefined()
                expect(recipient.bankAccount).toBeDefined()
                expect(recipient.name).toBeDefined()
                expect(recipient.isApproved).toBeDefined()
                expect(recipient.meta).toBeDefined()
            })

            test('user can\'t update isApproved field', async () => {
                const admin = await makeLoggedInAdminClient()
                const user = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(admin)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestRecipient(user, organization,  { isApproved: true })
                })
            })

            test('user can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const user = await makeClientWithNewRegisteredAndLoggedInUser()

                const [ organization ] = await createTestOrganization(admin)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestRecipient(user, organization)
                })
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const anonymous = await makeClient()

                const [ organization ] = await createTestOrganization(admin)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestRecipient(anonymous, organization)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(admin)

                const [ createdObj ] = await createTestRecipient(admin, organization)
                const [ readObj ] = await Recipient.getAll(admin, { id: createdObj.id })

                expect(readObj.importId).toEqual(createdObj.importId)
                expect(readObj.tin).toEqual(createdObj.tin)
                expect(readObj.iec).toEqual(createdObj.iec)
                expect(readObj.bic).toEqual(createdObj.bic)
                expect(readObj.bankAccount).toEqual(createdObj.bankAccount)
                expect(readObj.name).toEqual(createdObj.name)
                expect(readObj.isApproved).toEqual(createdObj.isApproved)
            })

            test('support can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(admin)

                const support = await makeClientWithSupportUser()

                const [ createdObj ] = await createTestRecipient(support, organization)
                const [ readObj ] = await Recipient.getAll(support, { id: createdObj.id })

                expect(readObj.importId).toEqual(createdObj.importId)
                expect(readObj.tin).toEqual(createdObj.tin)
                expect(readObj.iec).toEqual(createdObj.iec)
                expect(readObj.bic).toEqual(createdObj.bic)
                expect(readObj.bankAccount).toEqual(createdObj.bankAccount)
                expect(readObj.name).toEqual(createdObj.name)
                expect(readObj.isApproved).toEqual(createdObj.isApproved)
            })

            test('user can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const user = await makeClientWithNewRegisteredAndLoggedInUser()

                const [ organization ] = await createTestOrganization(admin)

                await createTestRecipient(admin, organization)

                const readObjects = await Recipient.getAll(user)

                expect(readObjects).toHaveLength(0)
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const anonymous = await makeClient()

                const [ organization ] = await createTestOrganization(admin)

                await createTestRecipient(admin, organization)

                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await Recipient.getAll(anonymous)
                })
            })
        })

        describe('update', () => {
            test('admin can update isApproved field', async () => {
                const admin = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(admin)

                const [ createdObj ] = await createTestRecipient(admin, organization)
                const [ updatedObj ] = await updateTestRecipient(admin, createdObj.id, { isApproved: true })

                expect(createdObj.id).toEqual(updatedObj.id)
                expect(createdObj.isApproved).toEqual(false)
                expect(updatedObj.isApproved).toEqual(true)
            })

            test('support can update isApproved field', async () => {
                const support = await makeClientWithSupportUser()
                const [organization] = await createTestOrganization(support)

                const [ createdObj ] = await createTestRecipient(support, organization)

                const [ updatedObj ] = await updateTestRecipient(support, createdObj.id, { isApproved: true })

                expect(createdObj.id).toEqual(updatedObj.id)
                expect(createdObj.isApproved).toEqual(false)
                expect(updatedObj.isApproved).toEqual(true)
            })

            test('user can\'t update isApproved field', async () => {
                const admin = await makeLoggedInAdminClient()
                const user = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(admin)

                const [ createdObj ] = await createTestRecipient(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {await updateTestRecipient(user,
                    createdObj.id, { isApproved: true })
                })
            })

            test('user can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const user = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(admin)

                const [ createdObj ] = await createTestRecipient(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {await updateTestRecipient(user,
                    createdObj.id, { name: 'UpdateName' })
                })
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const user = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(admin)

                const [ createdObj ] = await createTestRecipient(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {await updateTestRecipient(user,
                    createdObj.id, { name: 'UpdateName' })
                })
            })
        })

        describe('delete', () => {
            test('admin can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(admin)

                const [ createdObj ] = await createTestRecipient(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await Recipient.delete(admin, createdObj.id)
                })
            })
        })

        describe('constraints', () => {
            test('can\'t create same Recipient', async () => {
                const admin = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(admin)

                const [obj] = await createTestRecipient(admin, organization)

                await catchErrorFrom(
                    async () => {
                        await createTestRecipient(admin, organization, {
                            tin: obj.tin,
                            iec: obj.iec,
                            bic: obj.bic,
                            bankAccount: obj.bankAccount,
                        })
                    }, (e) => {
                        const msg = e.errors[0].message
                        expect(msg).toContain('duplicate key value violates unique constraint')
                    }
                )
            })

            test('can create - delete - create new Recipient', async () => {
                const admin = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(admin)

                const [obj] = await createTestRecipient(admin, organization)

                const [deletedObj] = await updateTestRecipient(admin, obj.id, { deletedAt: 'true' })

                const [objNew] = await createTestRecipient(admin, organization, {
                    tin: obj.tin,
                    iec: obj.iec,
                    bic: obj.bic,
                    bankAccount: obj.bankAccount,
                })

                expect(obj.id).toBeDefined()
                expect(deletedObj.id).toEqual(obj.id)
                expect(deletedObj.deletedAt).not.toBeNull()
                expect(objNew.id).toBeDefined()
                expect(obj.id).not.toEqual(objNew.id)
            })
        })
    })
})
