/**
 * Generated by `createschema acquiring.Recipient 'organization:Relationship:Organization:CASCADE; tin:Text; iec:Text; bic:Text; bankAccount:Text; bankName?:Text; offsettingAccount?:Text; territoryCode?:Text; purpose?Text; name?:Text; isApproved:Checkbox; meta?:Json;


'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE, waitFor } = require('@core/keystone/test.utils')

const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj, expectToThrowAccessDeniedErrorToObjects,
} = require('@condo/domains/common/utils/testSchema')

const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')

const { Recipient, createTestRecipient, updateTestRecipient } = require('@condo/domains/acquiring/utils/testSchema')
const { makeContextWithOrganizationAndIntegrationAsAdmin, createTestBillingRecipient, makeClientWithIntegrationAccess, createTestBillingIntegrationOrganizationContext, makeOrganizationIntegrationManager, BillingRecipient,
    updateTestBillingRecipient,
} = require('../../billing/utils/testSchema')
const { createTestOrganization } = require('../../organization/utils/testSchema')
const { RUSSIA_COUNTRY } = require('../../common/constants/countries')
const { TicketComment } = require('../../ticket/utils/testSchema')

describe('Recipient', () => {
    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(admin)

                const [recipient] = await createTestRecipient(admin, organization)

                expect(recipient.importId).toBeDefined()
                expect(recipient.tin).toBeDefined()
                expect(recipient.iec).toBeDefined()
                expect(recipient.bic).toBeDefined()
                expect(recipient.bankAccount).toBeDefined()
                expect(recipient.name).toBeDefined()
                expect(recipient.isApproved).toBeDefined()
                expect(recipient.meta).toBeDefined()
            })

            test('support can', async () => {
                const support = await makeClientWithSupportUser()

                const [organization] = await createTestOrganization(support)

                const [recipient] = await createTestRecipient(support, organization)

                expect(recipient.importId).toBeDefined()
                expect(recipient.tin).toBeDefined()
                expect(recipient.iec).toBeDefined()
                expect(recipient.bic).toBeDefined()
                expect(recipient.bankAccount).toBeDefined()
                expect(recipient.name).toBeDefined()
                expect(recipient.isApproved).toBeDefined()
                expect(recipient.meta).toBeDefined()
            })

            test('billing integration can', async () => {
                const admin = await makeLoggedInAdminClient()
                const integrationClient = await makeClientWithIntegrationAccess()

                const [ organization ] = await createTestOrganization(admin)
                await createTestBillingIntegrationOrganizationContext(admin, organization, integrationClient.integration)

                const [obj] = await createTestRecipient(integrationClient, organization)

                expect(obj.importId).toBeDefined()
                expect(obj.tin).toBeDefined()
                expect(obj.iec).toBeDefined()
                expect(obj.bic).toBeDefined()
                expect(obj.bankAccount).toBeDefined()
                expect(obj.name).toBeDefined()
                expect(obj.isApproved).toBeDefined()
                expect(obj.meta).toBeDefined()
            })

            test('organization integration manager can\'t', async () => {
                const { managerUserClient, organization } = await makeOrganizationIntegrationManager()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestRecipient(managerUserClient, organization)
                })
            })

            test('user can\'t create BillingRecipient', async () => {
                const admin = await makeLoggedInAdminClient()
                const user = await makeClientWithNewRegisteredAndLoggedInUser()

                const [ organization ] = await createTestOrganization(admin)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestRecipient(user, organization)
                })
            })

            test('anonymous can\'t create BillingRecipient', async () => {
                const admin = await makeLoggedInAdminClient()
                const anonymous = await makeClient()

                const [ organization ] = await createTestOrganization(admin)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestRecipient(anonymous, organization)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(admin)

                const [ createdObj ] = await createTestRecipient(admin, organization)
                const [ readObj ] = await Recipient.getAll(admin, { id: createdObj.id })

                expect(readObj.importId).toEqual(createdObj.importId)
                expect(readObj.tin).toEqual(createdObj.tin)
                expect(readObj.iec).toEqual(createdObj.iec)
                expect(readObj.bic).toEqual(createdObj.bic)
                expect(readObj.bankAccount).toEqual(createdObj.bankAccount)
                expect(readObj.name).toEqual(createdObj.name)
                expect(readObj.isApproved).toEqual(createdObj.isApproved)
            })

            test('support can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(admin)

                const support = await makeClientWithSupportUser()

                const [ createdObj ] = await createTestRecipient(support, organization)
                const [ readObj ] = await Recipient.getAll(support, { id: createdObj.id })

                expect(readObj.importId).toEqual(createdObj.importId)
                expect(readObj.tin).toEqual(createdObj.tin)
                expect(readObj.iec).toEqual(createdObj.iec)
                expect(readObj.bic).toEqual(createdObj.bic)
                expect(readObj.bankAccount).toEqual(createdObj.bankAccount)
                expect(readObj.name).toEqual(createdObj.name)
                expect(readObj.isApproved).toEqual(createdObj.isApproved)
            })

            test('organization integration manager can', async () => {
                const admin = await makeLoggedInAdminClient()
                const { managerUserClient, organization } = await makeOrganizationIntegrationManager()

                const [ createdObj ] = await createTestRecipient(admin, organization)
                const [ readObj ] = await Recipient.getAll(managerUserClient, { id: createdObj.id })

                expect(readObj.importId).toEqual(createdObj.importId)
                expect(readObj.tin).toEqual(createdObj.tin)
                expect(readObj.iec).toEqual(createdObj.iec)
                expect(readObj.bic).toEqual(createdObj.bic)
                expect(readObj.bankAccount).toEqual(createdObj.bankAccount)
                expect(readObj.name).toEqual(createdObj.name)
                expect(readObj.isApproved).toEqual(createdObj.isApproved)
            })

            test('integration service account can', async () => {
                const admin = await makeLoggedInAdminClient()
                const integrationClient = await makeClientWithIntegrationAccess()

                const [ organization ] = await createTestOrganization(admin)

                const [ createdObj ] = await createTestRecipient(integrationClient, organization)
                const [ readObj ] = await Recipient.getAll(integrationClient, { id: createdObj.id })

                expect(readObj.importId).toEqual(createdObj.importId)
                expect(readObj.tin).toEqual(createdObj.tin)
                expect(readObj.iec).toEqual(createdObj.iec)
                expect(readObj.bic).toEqual(createdObj.bic)
                expect(readObj.bankAccount).toEqual(createdObj.bankAccount)
                expect(readObj.name).toEqual(createdObj.name)
                expect(readObj.isApproved).toEqual(createdObj.isApproved)
            })

            test('user can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const user = await makeClientWithNewRegisteredAndLoggedInUser()

                const [ organization ] = await createTestOrganization(admin)

                await createTestRecipient(admin, organization)

                const readObjects = await Recipient.getAll(user)

                expect(readObjects).toHaveLength(0)
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const anonymous = await makeClient()

                const [ organization ] = await createTestOrganization(admin)

                await createTestRecipient(admin, organization)

                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await Recipient.getAll(anonymous)
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(admin)

                const [ createdObj ] = await createTestRecipient(admin, organization)
                const [ updatedObj ] = await updateTestRecipient(admin, createdObj.id, { isApproved: true })

                expect(createdObj.id).toEqual(updatedObj.id)
                expect(createdObj.isApproved).toEqual(false)
                expect(updatedObj.isApproved).toEqual(true)
            })

            test('support can', async () => {
                const support = await makeClientWithSupportUser()
                const [organization] = await createTestOrganization(support)

                const [ createdObj ] = await createTestRecipient(support, organization)
                const [ updatedObj ] = await updateTestRecipient(support, createdObj.id, { isApproved: true })

                expect(createdObj.id).toEqual(updatedObj.id)
                expect(createdObj.isApproved).toEqual(false)
                expect(updatedObj.isApproved).toEqual(true)
            })

            test('integration service account can update BillingRecipient', async () => {
                const admin = await makeLoggedInAdminClient()
                const integrationClient = await makeClientWithIntegrationAccess()

                const [ organization ] = await createTestOrganization(admin)

                const [ createdObj ] = await createTestRecipient(integrationClient, organization)
                const [ updatedObj ] = await updateTestRecipient(integrationClient, createdObj.id, { offsettingAccount: 123123 })

                expect(createdObj.id).toEqual(updatedObj.id)
                expect(createdObj.isApproved).toEqual(false)
                expect(updatedObj.isApproved).toEqual(true)
            })

            test('organization integration manager can\'t update BillingRecipient', async () => {

                const admin = await makeLoggedInAdminClient()
                const { managerUserClient, integration, organization } = await makeOrganizationIntegrationManager()
                const [context] = await createTestBillingIntegrationOrganizationContext(managerUserClient, organization, integration)

                const [ createdObj ] = await createTestBillingRecipient(admin, context)

                await expectToThrowAccessDeniedErrorToObj(async () => {await updateTestBillingRecipient(managerUserClient,
                    createdObj.id, { isApproved: true })
                })
            })

            test('user can\'t update BillingRecipients', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const user = await makeClientWithNewRegisteredAndLoggedInUser()
                const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin()

                const [ createdObj ] = await createTestBillingRecipient(adminClient, context)

                await expectToThrowAccessDeniedErrorToObj(async () => {await updateTestBillingRecipient(user,
                    createdObj.id, { isApproved: true })
                })
            })

            test('anonymous can\'t update BillingRecipients', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const user = await makeClientWithNewRegisteredAndLoggedInUser()
                const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin()

                const [ createdObj ] = await createTestBillingRecipient(adminClient, context)

                await expectToThrowAccessDeniedErrorToObj(async () => {await updateTestBillingRecipient(user,
                    createdObj.id, { isApproved: true })
                })
            })
        })
    })
})
