/**
 * Generated by `createschema acquiring.Order 'property:Relationship:Property:PROTECT'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, expectToThrowGQLError,
} = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { Order, createTestOrder, updateTestOrder, createTestAcquiringIntegrationContext, createTestAcquiringIntegration } = require('@condo/domains/acquiring/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { createTestTicket } = require('@condo/domains/ticket/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser, makeClientWithStaffUser,
    makeClientWithResidentUser,
} = require('@condo/domains/user/utils/testSchema')



describe('Order', () => {
    let admin, staff, support, anonymous, user
    let property, organization, integration

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        anonymous = await makeClient()
        staff = await makeClientWithStaffUser()
        user = await makeClientWithNewRegisteredAndLoggedInUser()

        const [testOrg] = await createTestOrganization(admin)
        const [testProperty] = await createTestProperty(admin, testOrg)
        const [testAcquiringIntegration] = await createTestAcquiringIntegration(admin)
        property = testProperty
        organization = testOrg
        integration = testAcquiringIntegration

    })
    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                const [acquiringContext] = await createTestAcquiringIntegrationContext(admin, organization, integration)
                const [order] = await createTestOrder(admin, acquiringContext )
                expect(order.id).toMatch(UUID_RE)
                expect(order.property.id).toEqual(property.id)
            })

            test('support can', async () => {
                const [ticket] = await createTestTicket(admin, organization, property)
                const [obj, attrs] = await createTestOrder(support, property, ticket)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: support.user.id }))
            })

            test('user can', async () => {
                const [ticket] = await createTestTicket(admin, organization, property)
                const [obj, attrs] = await createTestOrder(user, property, ticket)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: user.user.id }))
            })

            test('anonymous can\'t', async () => {
                const [ticket] = await createTestTicket(admin, organization, property)
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestOrder(anonymous, property, ticket)
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const [ticket] = await createTestTicket(admin, organization, property)
                const [objCreated] = await createTestOrder(admin, property, ticket)

                const [obj, attrs] = await updateTestOrder(admin, objCreated.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            })

            // TODO(codegen): if you do not have any SUPPORT specific tests just remove this block!
            test('support can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestOrder(admin)

                const client = await makeClientWithSupportUser()  // TODO(codegen): update SUPPORT client!
                const [obj, attrs] = await updateTestOrder(client, objCreated.id)  // TODO(codegen): write 'support: update Order' test

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('user can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestOrder(admin)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()  // TODO(codegen): create USER client!
                const [obj, attrs] = await updateTestOrder(client, objCreated.id)  // TODO(codegen): write 'user: update Order' test

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('anonymous can\'t', async () => {
                const [ticket] = await createTestTicket(admin, organization, property)
                const [objCreated] = await createTestOrder(admin, property, ticket)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestOrder(anonymous, objCreated.id)
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestOrder(admin)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await Order.delete(admin, objCreated.id)  // TODO(codegen): write 'admin: delete Order' test
                })
            })

            test('user can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestOrder(admin)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()  // TODO(codegen): create USER client!
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await Order.delete(client, objCreated.id)  // TODO(codegen): write 'user: delete Order' test
                })
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestOrder(admin)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await Order.delete(anonymous, objCreated.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const [ticket] = await createTestTicket(admin, organization, property)
                const [obj] = await createTestOrder(admin, property, ticket)

                const objs = await Order.getAll(admin, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                        toPay: obj.toPay,
                    }),
                ]))
            })

            test('resident user can', async () => {
                const [ticket] = await createTestTicket(admin, organization, property)
                const [obj] = await createTestOrder(admin, property, ticket)
                const resident = await makeClientWithResidentUser()

                const objs = await Order.getAll(resident, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs[0]).toMatchObject({
                    id: obj.id,
                    toPay: obj.toPay,
                })
            })

            // TODO(codegen): write test for user1 doesn't have access to user2 data if it's applicable
            test('user can\'t see other users\' Orders', async () => {
                const [user2] = await makeClientWithNewRegisteredAndLoggedInUser()
                const [ticket] = await createTestTicket(admin, organization, property)
                const [order1] = await createTestOrder(user, property, ticket)


                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await Order.getAll(user2, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })

            test('anonymous can\'t', async () => {
                const [ticket] = await createTestTicket(admin, organization, property)
                const [obj, attrs] = await createTestOrder(anonymous, property, ticket)

                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await Order.getAll(anonymous, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })

    describe('Validation tests', () => {
        test('Should have correct dv field (=== 1)', async () => {
            const [ticket] = await createTestTicket(admin, organization, property)
            await expectToThrowGQLError(async () => await createTestOrder(admin, property, ticket,  {
                dv: 2,
            }), {
                'code': 'BAD_USER_INPUT',
                'type': 'DV_VERSION_MISMATCH',
                'message': 'Wrong value for data version number',
                'mutation': 'createOrder',
                'variable': ['data', 'dv'],
            })
        })
    })
})
