/**
 * Generated by `createservice acquiring.PaymentCardTokensService '--type=queries'`
 */

const { GQLCustomSchema } = require('@open-condo/keystone/schema')
const access = require('@condo/domains/acquiring/access/PaymentCardTokensService')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT, INTERNAL_ERROR } } = require('@open-condo/keystone/errors')
const { NOT_FOUND } = require('@condo/domains/common/constants/errors')
const { generateQueryWhereInput, generateQuerySortBy } = require('@open-condo/codegen/generate.gql')
const { genUpdateGQL } = require('@open-condo/keystone/gen.gql.utils')
const { v4: uuid } = require('uuid')

/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const ERRORS = {
    NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY: {
        query: 'paymentCardTokens',
        variable: ['data', 'someVar'], // TODO(codegen): Provide path to a query/mutation variable, whose value caused this error. Remove this property, if variables are not relevant to this error
        code: BAD_USER_INPUT, // TODO(codegen): use one of the basic codes, declared in '@open-condo/keystone/errors'
        type: NOT_FOUND, // TODO(codegen): use value from `constants/errors.js` either from 'common' or current domain
        message: 'Describe what happened for developer',
        messageForUser: 'api.user.paymentCardTokens.NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY', // TODO(codegen): localized message for user, use translation files
    },
}

const ALL_PAYMENTS_CARD_TOKENS_FIELDS = {
    id: 'ID',
}

const PaymentCardTokensService = new GQLCustomSchema('PaymentCardTokensService', {
    types: [
        {
            access: true,
            type: generateQueryWhereInput('PaymentCardToken', ALL_PAYMENTS_CARD_TOKENS_FIELDS),
        },
        {
            access: true,
            type: generateQuerySortBy('PaymentCardToken', Object.keys(ALL_PAYMENTS_CARD_TOKENS_FIELDS)),
        },
        {
            access: true,
            type: 'type PaymentCardTokensOutput { id: ID!, deletedAt: String }',
        },
        {
            access: true,
            type: 'input PaymentCardTokenUpdateInput { dv: Int!, sender: SenderFieldInput!, deletedAt: String }',
        },
        {
            access: true,
            type: 'type PaymentCardToken { id: ID, deletedAt: String }',
        },

        // {
        //     access: true,
        //     type: 'type allPaymentCardTokensOutput {  ' +
        //         'clientId: UserWhereUniqueInput! ' +
        //         'token: String! ' +
        //         'paymentSystem: String! ' +
        //         'cardNumber: String! ' +
        //         'expiration: String! ' +
        //         'bankName: String ' +
        //         'bankCountryCode: String   }',
        // },
    ],

    queries: [
        {
            access: access.canGetPaymentCardTokens,
            schema: 'allPaymentCardTokens (where: PaymentCardTokenWhereInput, first: Int, skip: Int, sortBy: [SortPaymentCardTokensBy!]): [PaymentCardTokensOutput]',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: clientId } = args

                return [{ id: uuid() }]

                // throw new GQLError(ERRORS.NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY)
            },
        },
    ],
    mutations: [
        {
            access: access.canUpdateCardTokens,
            schema: 'updatePaymentCardToken(id: ID!, data: PaymentCardTokenUpdateInput): PaymentCardToken!',
            resolver: async (parent, args, context, info, extra = {}) => {
                // wrap validator function to the current call context
                const { data } = args

                return { id: uuid(), deletedAt: new Date().toISOString() }
            },
        },
    ],
})

module.exports = {
    PaymentCardTokensService,
}
