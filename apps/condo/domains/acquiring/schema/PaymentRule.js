/**
 * Generated by `createschema acquiring.PaymentRule 'context:Relationship:AcquiringIntegrationContext:PROTECT;explicitFee?:Decimal;implicitFee?:Decimal;bankAccount?:Relationship:BankAccount:PROTECT;merchant?:Text;marketPlaceScope?:Relationship:PaymentRuleMarketPlaceScope:PROTECT;billingScope?:Relationship:PaymentRuleBillingScope:PROTECT'`
 */

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/acquiring/access/PaymentRule')
const {
    NON_NEGATIVE_MONEY_FIELD,
} = require('@condo/domains/common/schema/fields')

const PaymentRule = new GQLListSchema('PaymentRule', {
    schemaDoc: 'Defines the bank account and the fee settings where the money will be transferred',
    fields: {

        context: {
            schemaDoc: 'acquiring context for the payment rule',
            type: 'Relationship',
            ref: 'AcquiringIntegrationContext',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.PROTECT' },
        },

        explicitFee: {
            ...NON_NEGATIVE_MONEY_FIELD,
            schemaDoc: 'Amount of money which payer pays on top of initial "amount", which counts as fee for every service which is not housing and communal services',
            isRequired: false,
        },

        explicitServiceCharge: {
            ...NON_NEGATIVE_MONEY_FIELD,
            schemaDoc: 'Amount of money which payer pays on top of initial "amount", which counts as internal service charge for all payments from housing and communal services category',
            isRequired: false,
        },

        implicitFee: {
            ...NON_NEGATIVE_MONEY_FIELD,
            schemaDoc: 'Amount of money which recipient pays from initial amount for transaction',
            isRequired: false,
        },

        minFeeAmount: {
            ...NON_NEGATIVE_MONEY_FIELD,
            schemaDoc: 'Minimum fee',
            isRequired: false,
        },

        maxFeeAmount: {
            ...NON_NEGATIVE_MONEY_FIELD,
            schemaDoc: 'Maximum fee',
            isRequired: false,
        },

        bankAccount: {
            schemaDoc: 'Bank account from organization that will be used for money transfer',
            type: 'Relationship',
            ref: 'BankAccount',
            kmigratorOptions: { null: true, on_delete: 'models.PROTECT' },
        },

        merchant: {
            schemaDoc: 'Acquiring specific settings to define MCC (used to classify businesses by the type of goods or services they provide)',
            type: 'Text',
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadPaymentRules,
        create: access.canManagePaymentRules,
        update: access.canManagePaymentRules,
        delete: false,
        auth: true,
    },
})

module.exports = {
    PaymentRule,
}
