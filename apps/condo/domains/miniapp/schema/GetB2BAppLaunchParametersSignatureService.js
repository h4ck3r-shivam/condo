/**
 * Generated by `createservice miniapp.GetB2BAppLaunchParametersSignatureService --type queries`
 */

const get = require('lodash/get')

const { GQLError, GQLErrorCode: { FORBIDDEN } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema, getByCondition } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/miniapp/access/GetB2BAppLaunchParametersSignatureService')
const { generateSignature } = require('@condo/domains/miniapp/utils/serverSchema/generateSignature')


/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const ERRORS = {
    MINIAPP_ACCESS_DENIED: {
        query: 'getB2BAppLaunchParametersSignature',
        variable: ['data'],
        code: FORBIDDEN,
        type: 'MINIAPP_ACCESS_DENIED',
        message: 'Miniapp access denied',
        messageForUser: 'api.user.getB2BAppLaunchParametersSignature.MINIAPP_ACCESS_DENIED',
    },
}

const getB2BAppSignature = async (appId, organizationId, userId) => {
    if (!appId) throw new Error('No appId!')
    if (!organizationId) throw new Error('No organizationId!')
    if (!userId) throw new Error('No userId!')

    // todo should be secret key for each miniapp
    const secretKey = '12345'

    return generateSignature(organizationId, userId, secretKey)
}

const GetB2BAppLaunchParametersSignatureService = new GQLCustomSchema('GetB2BAppLaunchParametersSignatureService', {
    types: [
        {
            access: true,
            type: 'input GetB2BAppLaunchParametersSignatureInput { dv: Int!, sender: SenderFieldInput!, organization: OrganizationWhereUniqueInput!, app: B2BAppWhereUniqueInput! }',
        },
        {
            access: true,
            type: 'type GetB2BAppLaunchParametersSignatureOutput { signature: String! }',
        },
    ],
    
    queries: [
        {
            access: access.canGetB2BAppLaunchParametersSignature,
            schema: 'getB2BAppLaunchParametersSignature (data: GetB2BAppLaunchParametersSignatureInput!): GetB2BAppLaunchParametersSignatureOutput',
            doc: {
                summary: 'Returns a unique signature for each miniapp in conjunction with the organization and user.',
                description: 'This signature allows the miniapp to verify that the request parameters were actually sent from the Condo and have not been changed.',
                errors: ERRORS,
            },
            resolver: async (parent, args, context) => {
                const { data: { organization, app } } = args
                const { authedItem: user } = context

                const employee = await getByCondition('OrganizationEmployee', {
                    organization: { ...organization, deletedAt: null },
                    user: { id: user.id, deletedAt: null },
                    deletedAt: null,
                    isBlocked: false,
                    isRejected: false,
                    isAccepted: true,
                })

                const employeeRoleId = get(employee, 'role', null)
                if (!employeeRoleId) throw new GQLError(ERRORS.MINIAPP_ACCESS_DENIED, context)

                const appRole = await getByCondition('B2BAppRole', {
                    app: { ...app, deletedAt: null },
                    role: { id: employeeRoleId },
                    deletedAt: null,
                })
                if (!appRole) throw new GQLError(ERRORS.MINIAPP_ACCESS_DENIED, context)

                const signature = await getB2BAppSignature(app.id, organization.id, user.id)

                return { signature }
            },
        },
    ],
    
})

module.exports = {
    GetB2BAppLaunchParametersSignatureService,
    ERRORS,
}
