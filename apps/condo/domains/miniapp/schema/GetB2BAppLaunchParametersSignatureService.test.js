/**
 * Generated by `createservice miniapp.GetB2BAppLaunchParametersSignatureService --type queries`
 */

const {
    makeLoggedInAdminClient,
    makeClient,
    expectToThrowAuthenticationErrorToObj,
    expectToThrowGQLError,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { CONTEXT_FINISHED_STATUS } = require('@condo/domains/miniapp/constants')
const { generateSignature } = require('@condo/domains/miniapp/utils/serverSchema/generateSignature')
const { getB2BAppLaunchParametersSignatureByTestClient } = require('@condo/domains/miniapp/utils/testSchema')
const { createTestB2BApp, createTestB2BAppContext } = require('@condo/domains/miniapp/utils/testSchema')
const { makeEmployeeUserClientWithAbilities, createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithSupportUser, makeClientWithNewRegisteredAndLoggedInUser, makeClientWithResidentUser } = require('@condo/domains/user/utils/testSchema')

const { ERRORS } = require('./GetB2BAppLaunchParametersSignatureService')

 
describe('GetB2BAppLaunchParametersSignatureService', () => {
    let admin, support, anonymous, manager, employee, otherEmployee, resident, app, noConnectedApp

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        anonymous = await makeClient()
        manager = await makeEmployeeUserClientWithAbilities({
            canManageB2BApps: true,
        })
        employee = await makeClientWithNewRegisteredAndLoggedInUser()
        otherEmployee = await makeEmployeeUserClientWithAbilities()
        resident = await makeClientWithResidentUser()

        const [employeeRole] = await createTestOrganizationEmployeeRole(admin, manager.organization, {
            canManageB2BApps: false,
        })
        await createTestOrganizationEmployee(admin, manager.organization, employee.user, employeeRole, {
            isAccepted: true,
        })

        {[app] = await createTestB2BApp(support, {
            contextDefaultStatus: CONTEXT_FINISHED_STATUS,
        })}

        {[noConnectedApp] = await createTestB2BApp(support)}
        await createTestB2BAppContext(manager, app, manager.organization)
    })

    describe('Accesses', () => {
        describe('Admin', () => {
            test('Cannot execute', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await getB2BAppLaunchParametersSignatureByTestClient(admin, {
                        organization: { id: manager.organization.id },
                        app: { id: app.id },
                    })
                })
            })
        })

        describe('Support', () => {
            test('Cannot execute', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await getB2BAppLaunchParametersSignatureByTestClient(support, {
                        organization: { id: manager.organization.id },
                        app: { id: app.id },
                    })
                })
            })
        })

        describe('Employee', () => {
            test('Can execute', async () => {
                const [res] = await getB2BAppLaunchParametersSignatureByTestClient(manager, {
                    organization: { id: manager.organization.id },
                    app: { id: app.id },
                })

                expect(res.signature).toBeDefined()
            })
        })

        describe('No employee', () => {
            test('Cannot execute', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await getB2BAppLaunchParametersSignatureByTestClient(resident, {
                        organization: { id: manager.organization.id },
                        app: { id: app.id },
                    })
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await getB2BAppLaunchParametersSignatureByTestClient(otherEmployee, {
                        organization: { id: manager.organization.id },
                        app: { id: app.id },
                    })
                })
            })
        })

        describe('Anonymous', () => {
            test('Cannot execute', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await getB2BAppLaunchParametersSignatureByTestClient(anonymous, {
                        organization: { id: manager.organization.id },
                        app: { id: app.id },
                    })
                })
            })
        })
    })

    describe('Basic logic', () => {
        test('Should return correct signature if miniapp is connected and employee has access to miniapp', async () => {
            const [res] = await getB2BAppLaunchParametersSignatureByTestClient(manager, {
                organization: { id: manager.organization.id },
                app: { id: app.id },
            })

            // todo get key when create miniapp
            const secretKey = '12345'
            const expectedSignature = generateSignature(manager.organization.id, manager.user.id, secretKey)
            expect(res.signature).toBe(expectedSignature)
        })

        test('Should throw error if miniapp is not connected', async () => {
            await expectToThrowGQLError(async () => {
                await getB2BAppLaunchParametersSignatureByTestClient(manager, {
                    organization: { id: manager.organization.id },
                    app: { id: noConnectedApp.id },
                })
            }, ERRORS.MINIAPP_ACCESS_DENIED)
        })

        test('Should throw error if employee not has access to miniapp in organization', async () => {
            await expectToThrowGQLError(async () => {
                await getB2BAppLaunchParametersSignatureByTestClient(employee, {
                    organization: { id: manager.organization.id },
                    app: { id: app.id },
                })
            }, ERRORS.MINIAPP_ACCESS_DENIED)
        })
    })
})
