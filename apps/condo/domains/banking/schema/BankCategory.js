/**
 * Generated by `createschema banking.BankCategory 'name:Text;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File, Url } = require('@keystonejs/fields')
const { Json, LocalizedText } = require('@condo/keystone/fields')
const { GQLListSchema } = require('@condo/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@condo/keystone/plugins')
const access = require('@condo/domains/banking/access/BankCategory')


const BankCategory = new GQLListSchema('BankCategory', {
    schemaDoc: 'Expenses category, that will be associated with transactions and contractors. Logically organized as a tree, which is stored in Nested Set format. To act as Nested Set, a one common technical root node should be presented, that will contain logically top-most categories as direct descendants. Categories are not intended to be changed frequently. After changes of the categories tree topology, index of Nested Set should be regenerated by manually calling buildNestedSetIndex function',
    fields: {

        name: {
            schemaDoc: 'Key for i18n',
            type: LocalizedText,
            isRequired: true,
            template: 'banking.category.*.name',
        },

        // TODO(antonal): extract `parent`, `left` and `right`, `sortOrder` to plugin and name it as 'nestedSet`
        parent: {
            schemaDoc: 'Nested set model. Reference to parent tree node',
            type: Relationship,
            ref: 'BankCategory',
            knexOptions: { isNotNullable: false }, // Relationship only!
            kmigratorOptions: { null: true, on_delete: 'models.CASCADE' },
            hooks: {
                validateInput: ({ resolvedData, fieldPath, addFieldValidationError, existingItem }) => {
                    if (existingItem && resolvedData.parent === existingItem.id) {
                        addFieldValidationError('Cannot associate parent to itself')
                    }
                },
            },
        },

        left: {
            schemaDoc: 'Nested set model. Left-hand-side index of subset, covered by this node',
            type: Integer,
            isRequired: false,
        },

        right: {
            schemaDoc: 'Nested set model. Right-hand-side index of subset, covered by this node',
            type: Integer,
            isRequired: false,
        },

        depth: {
            schemaDoc: 'Nested set model. Depth of the node. Root node depth is 0',
            type: Integer,
            isRequired: false,
        },

        sortOrder: {
            schemaDoc: 'Display order among siblings of the category',
            type: Integer,
            isRequired: false,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadBankCategories,
        create: access.canManageBankCategories,
        update: access.canManageBankCategories,
        delete: false,
        auth: true,
    },
})

module.exports = {
    BankCategory,
}
