/**
 * Generated by `createservice banking.CreateBankAccountRequestService '--type=mutations'`
 */

const { GQLCustomSchema } = require('@open-condo/keystone/schema')
const access = require('@condo/domains/banking/access/CreateBankAccountRequestService')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT, INTERNAL_ERROR } } = require('@open-condo/keystone/errors')
const { NOT_FOUND } = require('@condo/domains/common/constants/errors')
const { BANK_ACCOUNT_CREATION_REQUEST_TYPE } = require('@condo/domains/notification/constants/constants')
const { sendMessage } = require('@condo/domains/notification/utils/serverSchema')
const conf = require('@open-condo/config')

/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const errors = {
    NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY: {
        mutation: 'createBankAccountRequest',
        variable: ['data', 'someVar'], // TODO(codegen): Provide path to a query/mutation variable, whose value caused this error. Remove this property, if variables are not relevant to this error
        code: BAD_USER_INPUT, // TODO(codegen): use one of the basic codes, declared in '@open-condo/keystone/errors'
        type: NOT_FOUND, // TODO(codegen): use value from `constants/errors.js` either from 'common' or current domain
        message: 'Describe what happened for developer',
        messageForUser: 'api.user.createBankAccountRequest.NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY', // TODO(codegen): localized message for user, use translation files
    },
}

const CreateBankAccountRequestService = new GQLCustomSchema('CreateBankAccountRequestService', {
    types: [
        {
            access: true,
            type: 'input BankAccountClient { phone: String!, email: String, name: String! }',
        },
        {
            access: true,
            type: 'input CreateBankAccountRequestInput { dv: Int!, sender: JSON!, bankAccountClient: BankAccountClient!, tin: String!, name: String!, organizationId: ID!, propertyAddress: String! }',
        },
        {
            access: true,
            type: 'type CreateBankAccountRequestOutput { status: String!, id: ID! }',
        },
    ],

    mutations: [
        {
            access: access.canCreateBankAccountRequest,
            schema: 'createBankAccountRequest(data: CreateBankAccountRequestInput!): CreateBankAccountRequestOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: {
                    bankAccountClient, tin, name, propertyAddress, sender,
                } } = args
                const emailTo = conf['BANK_ACCOUNT_REQUEST_EMAIL_TARGET']

                const { status, id } = await sendMessage(context, {
                    to: {
                        // TODO: get email from env
                        email: emailTo,
                    },
                    type: BANK_ACCOUNT_CREATION_REQUEST_TYPE,
                    meta: {
                        dv: 1,
                        bankAccountClient,
                        tin,
                        name,
                        propertyAddress,
                    },
                    sender,
                })

                // TODO: throw errors in a following way
                // throw new GQLError(errors.NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY)

                return { id, status }
            },
        },
    ],

})

module.exports = {
    CreateBankAccountRequestService,
}
