/**
 * Generated by `createservice banking.CreateBankAccountRequestService '--type=mutations'`
 */

const { GQLCustomSchema } = require('@open-condo/keystone/schema')
const access = require('@condo/domains/banking/access/CreateBankAccountRequestService')
const { GQLError, GQLErrorCode: { INTERNAL_ERROR } } = require('@open-condo/keystone/errors')
const { BANK_ACCOUNT_CREATION_REQUEST_TYPE } = require('@condo/domains/notification/constants/constants')
const { sendMessage } = require('@condo/domains/notification/utils/serverSchema')
const conf = require('@open-condo/config')

/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const errors = {
    NO_EMAIL_TARGET_WAS_SET: {
        mutation: 'createBankAccountRequest',
        message: 'No BANK_ACCOUNT_REQUEST_EMAIL_TARGET variable was found',
        type: 'EMPTY_BANK_ACCOUNT_REQUEST_EMAIL_TARGET_VALUE',
        code: INTERNAL_ERROR,
    },
}

const CreateBankAccountRequestService = new GQLCustomSchema('CreateBankAccountRequestService', {
    types: [
        {
            access: true,
            type: 'input BankAccountClient { phone: String!, email: String, name: String! }',
        },
        {
            access: true,
            type: 'input CreateBankAccountRequestInput { dv: Int!, sender: JSON!, bankAccountClient: BankAccountClient!, tin: String!, name: String!, organizationId: ID!, propertyAddress: String! }',
        },
        {
            access: true,
            type: 'type CreateBankAccountRequestOutput { status: String!, id: ID! }',
        },
    ],

    mutations: [
        {
            access: access.canCreateBankAccountRequest,
            schema: 'createBankAccountRequest(data: CreateBankAccountRequestInput!): CreateBankAccountRequestOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: {
                    bankAccountClient, tin, name, propertyAddress, sender,
                } } = args
                const emailTo = conf['BANK_ACCOUNT_REQUEST_EMAIL_TARGET']

                if (!emailTo) {
                    throw new GQLError(errors.NO_EMAIL_TARGET_WAS_SET, context)
                }

                const { status, id } = await sendMessage(context, {
                    to: {
                        email: emailTo,
                    },
                    type: BANK_ACCOUNT_CREATION_REQUEST_TYPE,
                    meta: {
                        dv: 1,
                        bankAccountClient,
                        tin,
                        name,
                        propertyAddress,
                    },
                    sender,
                })

                return { id, status }
            },
        },
    ],

})

module.exports = {
    CreateBankAccountRequestService,
}
