/**
 * Generated by `createservice notification.SyncRemoteClientService --type mutations`
 */
const get = require('lodash/get')

const { GQLCustomSchema, getById, getByCondition } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/notification/access/SyncRemoteClientService')
const { RemoteClient } = require('@condo/domains/notification/utils/serverSchema')

const { PUSH_TRANSPORT_TYPES, DEVICE_PLATFORM_TYPES, PUSH_TYPES } = require('../constants/constants')

const SyncRemoteClientService = new GQLCustomSchema('SyncRemoteClientService', {
    types: [
        {
            access: true,
            type: `enum PushTransportType { ${PUSH_TRANSPORT_TYPES.join(' ')} }`,
        },
        {
            access: true,
            type: `enum DevicePlatformType { ${DEVICE_PLATFORM_TYPES.join(' ')} }`,
        },
        {
            access: true,
            type: `enum PushType { ${PUSH_TYPES.join(' ')} }`,
        },
        {
            access: true,
            type: 'input SyncRemoteClientInput { dv: Int!, sender: SenderFieldInput!, deviceId: String!, appId: String!, pushToken: String, pushTransport: PushTransportType, devicePlatform: DevicePlatformType, pushType: PushType, meta: JSON, pushTokenVoIP: String, pushTransportVoIP: PushTransportType, pushTypeVoIP: PushType }',
        },
    ],
    
    mutations: [
        {
            access: access.canSyncRemoteClient,
            schema: 'syncRemoteClient(data: SyncRemoteClientInput!): RemoteClient',
            resolver: async (parent, args, context) => {
                const {
                    data: {
                        dv, sender, deviceId, appId,
                        pushToken, pushTransport, devicePlatform, pushType, meta,
                        pushTokenVoIP, pushTransportVoIP, pushTypeVoIP,
                    },
                } = args
                console.log('rustore payload', args)
                /**
                 * Clear already used pushToken to avoid collisions
                 */
                if (pushToken) {
                    const presentRemoteClient = await getByCondition('RemoteClient', { pushToken })
                    console.log('rustore presentRemoteClient', presentRemoteClient)

                    if (get(presentRemoteClient, 'id')) {
                        await RemoteClient.update(context, presentRemoteClient.id, { dv, sender, pushToken: null })
                    }
                }

                /**
                 * Clear already used pushTokenVoIP to avoid collisions
                 */
                if (pushTokenVoIP) {
                    const presentRemoteClient = await getByCondition('RemoteClient', { pushTokenVoIP })

                    if (get(presentRemoteClient, 'id')) {
                        await RemoteClient.update(context, presentRemoteClient.id, { dv, sender, pushTokenVoIP: null })
                    }
                }

                const userId = get(context, 'authedItem.id', null)
                const owner = userId ? { disconnectAll: true, connect: { id: userId } } : null
                const attrs = {
                    dv, sender, deviceId, appId, owner,
                    pushToken, pushTransport, devicePlatform, pushType, meta,
                    pushTokenVoIP, pushTransportVoIP, pushTypeVoIP,
                }
                const where = { deviceId, appId }
                console.log('rustore before updateOrCreate', 'attrs', JSON.stringify(attrs))

                const data = await RemoteClient.updateOrCreate(context, where, attrs)
                console.log('rustore after updateOrCreate', 'attrs', JSON.stringify(data))

                return await getById('RemoteClient', data.id)
            },
        },
    ],
    
})

module.exports = {
    SyncRemoteClientService,
}
