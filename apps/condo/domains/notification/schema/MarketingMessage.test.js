/**
 * Generated by `createschema notification.MarketingMessage 'type:Select:sms,email,push; message:Text; deepLink?:Text; idList:Json; status:Select:created,done; processingMeta?:Json;'`
 */
const faker = require('faker')
const { sample } = require('lodash')

const {
    makeLoggedInAdminClient,
    makeClient,
    UUID_RE,
    DATETIME_RE,
} = require('@condo/keystone/test.utils')

const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj, expectToThrowAccessDeniedErrorToObjects,
    expectToThrowValidationFailureError,
} = require('@condo/domains/common/utils/testSchema')
const {
    JSON_EXPECT_ARRAY_ERROR,
    JSON_EXPECT_OBJECT_ERROR,
    OPERATION_FORBIDDEN,
} = require('@condo/domains/common/constants/errors')

const {
    MarketingMessage,
    createTestMarketingMessage,
    updateTestMarketingMessage,
} = require('@condo/domains/notification/utils/testSchema')

const {
    makeClientWithNewRegisteredAndLoggedInUser,
    makeClientWithSupportUser,
} = require('@condo/domains/user/utils/testSchema')

const {
    MARKETING_MESSAGE_CREATED_STATUS,
    MARKETING_MESSAGE_TRANSPORT_TYPES,
    MARKETING_MESSAGE_PROCESSING_STATUS,
} = require('../constants/constants')


describe('MarketingMessage', () => {
    let admin
    let anonymous
    let support
    let userClient
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        anonymous = await makeClient()
        support = await makeClientWithSupportUser()
        userClient = await makeClientWithNewRegisteredAndLoggedInUser()
    })

    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                const [obj, attrs] = await createTestMarketingMessage(admin)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(1)
                expect(obj.newId).toEqual(null)
                expect(obj.deletedAt).toEqual(null)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
                expect(obj.createdAt).toMatch(DATETIME_RE)
                expect(obj.updatedAt).toMatch(DATETIME_RE)
                expect(obj.transportType).toMatch(attrs.transportType)
                expect(obj.title).toMatch(attrs.title)
                expect(obj.message).toMatch(attrs.message)
                expect(obj.deepLink).toMatch(attrs.deepLink)
                expect(obj.idList).toEqual(attrs.idList)
                expect(obj.status).toMatch(MARKETING_MESSAGE_CREATED_STATUS)
            })

            test('support can', async () => {
                const [obj, attrs] = await createTestMarketingMessage(support)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(1)
                expect(obj.newId).toEqual(null)
                expect(obj.deletedAt).toEqual(null)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: support.user.id }))
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: support.user.id }))
                expect(obj.createdAt).toMatch(DATETIME_RE)
                expect(obj.updatedAt).toMatch(DATETIME_RE)
                expect(obj.transportType).toMatch(attrs.transportType)
                expect(obj.title).toMatch(attrs.title)
                expect(obj.message).toMatch(attrs.message)
                expect(obj.deepLink).toMatch(attrs.deepLink)
                expect(obj.idList).toEqual(attrs.idList)
                expect(obj.status).toMatch(MARKETING_MESSAGE_CREATED_STATUS)
            })

            test('user can not', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMarketingMessage(userClient)
                })
            })

            test('anonymous can not', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestMarketingMessage(anonymous)
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const [objCreated] = await createTestMarketingMessage(admin)
                const [obj, attrs] = await updateTestMarketingMessage(admin, objCreated.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(3) // There is update operation within task under the hood
            })

            test('support can', async () => {
                const [objCreated] = await createTestMarketingMessage(admin)
                const [obj, attrs] = await updateTestMarketingMessage(support, objCreated.id)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: support.user.id }))
            })

            test('user can not', async () => {
                const [objCreated] = await createTestMarketingMessage(admin)
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMarketingMessage(client, objCreated.id)
                })
            })

            test('anonymous can not', async () => {
                const [objCreated] = await createTestMarketingMessage(admin)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestMarketingMessage(anonymous, objCreated.id)
                })
            })
        })

        describe('hard delete', () => {
            test('admin can not', async () => {
                const [objCreated] = await createTestMarketingMessage(admin)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MarketingMessage.delete(admin, objCreated.id)
                })
            })

            test('user can not', async () => {
                const [objCreated] = await createTestMarketingMessage(admin)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MarketingMessage.delete(userClient, objCreated.id)
                })
            })

            test('anonymous can not', async () => {
                const [objCreated] = await createTestMarketingMessage(admin)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MarketingMessage.delete(anonymous, objCreated.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const [obj, attrs] = await createTestMarketingMessage(admin)
                const obj1 = await MarketingMessage.getOne(admin, { id: obj.id })

                expect(obj1).not.toBeUndefined()
                expect(obj1).toEqual(
                    expect.objectContaining({
                        id: obj.id,
                        transportType: attrs.transportType,
                        title: attrs.title,
                        message: attrs.message,
                        deepLink: attrs.deepLink,
                        idList: attrs.idList,
                    }),
                )
            })

            test('support can', async () => {
                const [obj, attrs] = await createTestMarketingMessage(support)
                const obj1 = await MarketingMessage.getOne(support, { id: obj.id })

                expect(obj1).not.toBeUndefined()
                expect(obj1).toEqual(
                    expect.objectContaining({
                        id: obj.id,
                        transportType: attrs.transportType,
                        title: attrs.title,
                        message: attrs.message,
                        deepLink: attrs.deepLink,
                        idList: attrs.idList,
                        status: MARKETING_MESSAGE_CREATED_STATUS,
                    }),
                )
            })

            test('user can not', async () => {
                const [obj] = await createTestMarketingMessage(admin)

                await expectToThrowAccessDeniedErrorToObjects(async () => {
                    await MarketingMessage.getOne(userClient, { id: obj.id })
                })
            })

            test('anonymous can not', async () => {
                const [obj] = await createTestMarketingMessage(admin)

                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await MarketingMessage.getOne(anonymous, { id: obj.id })
                })
            })
        })
    })

    describe('Validation tests', () => {
        test('Non-object value in processingMeta fails', async () => {
            await expectToThrowValidationFailureError(
                async () => { await createTestMarketingMessage(admin, { processingMeta: faker.random.alphaNumeric(8) }) },
                `${JSON_EXPECT_OBJECT_ERROR}processingMeta] Expect JSON Object`
            )
        })


        test('Non-array value in idList fails', async () => {
            await expectToThrowValidationFailureError(
                async () => { await createTestMarketingMessage(admin, { idList: {} }) },
                `${JSON_EXPECT_ARRAY_ERROR}idList] Expect non-empty JSON Array`
            )
        })

        test('Empty array in idList fails', async () => {
            await expectToThrowValidationFailureError(
                async () => { await createTestMarketingMessage(admin, { idList: [] }) },
                `${JSON_EXPECT_ARRAY_ERROR}idList] Expect non-empty JSON Array`
            )
        })

        test('admin can not update transportType', async () => {
            const [objCreated] = await createTestMarketingMessage(admin)

            await expectToThrowValidationFailureError(async () => {
                await updateTestMarketingMessage(admin, objCreated.id, { transportType: sample(MARKETING_MESSAGE_TRANSPORT_TYPES) })
            }, `${OPERATION_FORBIDDEN}] Updating transportType is forbidden.`)
        })

        test('admin can not update title', async () => {
            const [objCreated] = await createTestMarketingMessage(admin)

            await expectToThrowValidationFailureError(async () => {
                await updateTestMarketingMessage(admin, objCreated.id, { title: faker.random.alphaNumeric(8) })
            }, `${OPERATION_FORBIDDEN}] Updating title is forbidden.`)
        })

        test('admin can not update message', async () => {
            const [objCreated] = await createTestMarketingMessage(admin)

            await expectToThrowValidationFailureError(async () => {
                await updateTestMarketingMessage(admin, objCreated.id, { message: faker.random.alphaNumeric(8) })
            }, `${OPERATION_FORBIDDEN}] Updating message is forbidden.`)
        })

        test('admin can not update deepLink', async () => {
            const [objCreated] = await createTestMarketingMessage(admin)

            await expectToThrowValidationFailureError(async () => {
                await updateTestMarketingMessage(admin, objCreated.id, { deepLink: faker.random.alphaNumeric(8) })
            }, `${OPERATION_FORBIDDEN}] Updating deepLink is forbidden.`)
        })

        test('admin can not update idList', async () => {
            const [objCreated] = await createTestMarketingMessage(admin)

            await expectToThrowValidationFailureError(async () => {
                await updateTestMarketingMessage(admin, objCreated.id, { idList: [faker.random.alphaNumeric(8)] })
            }, `${OPERATION_FORBIDDEN}] Updating idList is forbidden.`)
        })

    })
})
