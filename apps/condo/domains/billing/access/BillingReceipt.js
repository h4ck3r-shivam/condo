/**
 * Generated by `createschema billing.BillingReceipt 'context:Relationship:BillingIntegrationOrganizationContext:CASCADE; importId?:Text; property:Relationship:BillingProperty:CASCADE; account:Relationship:BillingAccount:CASCADE; period:CalendarDay; raw:Json; toPay:Text; services:Json; meta:Json'`
 */

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find } = require('@open-condo/keystone/schema')

const { CONTEXT_FINISHED_STATUS: ACQUIRING_CONTEXT_FINISHED_STATUS } = require('@condo/domains/acquiring/constants/context')
const { canManageBillingEntityWithContext } = require('@condo/domains/billing/utils/accessSchema')
const { CONTEXT_FINISHED_STATUS: BILLING_CONTEXT_FINISHED_STATUS } = require('@condo/domains/miniapp/constants')
const { RESIDENT } = require('@condo/domains/user/constants/common')

async function canReadBillingReceipts ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return {}

    if (user.type === RESIDENT) {
        // 1. Receipts are available for organizations that have AcquiringContext in status 'Finished' (have a Contract for receiving payments)
        // 2. Only when an organization registered Property
        const residents = await find('Resident', { user: { id: user.id }, deletedAt: null })
        console.log('1. residents: ', residents)
        if (!residents || residents.length === 0) {
            return false
        }
        let serviceConsumers = await find('ServiceConsumer', { resident: { id_in: residents.map(r => r.id) }, deletedAt: null })
        console.log('2. serviceConsumers: ', serviceConsumers)
        if (!serviceConsumers || serviceConsumers.length === 0) {
            return false
        }
        // Exclude all serviceConsumers for organizations without Contract
        const organizationsWithContract = (await find('AcquiringIntegrationContext', {
            organization: { id_in: serviceConsumers.map(({ organization }) => organization ), deletedAt: null },
            integration: { deletedAt: null },
            status: ACQUIRING_CONTEXT_FINISHED_STATUS,
            deletedAt: null,
        })).map(({ organization }) => organization)
        console.log('3. organizationsWithContract: ', organizationsWithContract)

        serviceConsumers = serviceConsumers.filter(({ organization }) => organizationsWithContract.includes(organization))
        console.log('4. filtered serviceConsumers: ', serviceConsumers)

        if (!serviceConsumers.length) {
            return null
        }
        // Only for properties
        const propertiesForOrganizations = Object.fromEntries(await Promise.all(organizationsWithContract.map(async organizationId => {
            return [organizationId,  (await find('Property', { organization: { id: organizationId }, deletedAt: null })).map(({ addressKey }) => addressKey)]
        })))
        console.log('5. Organizations with properties', propertiesForOrganizations)

        console.log('6. Query DEBUG: ', {
            OR: serviceConsumers.map(
                serviceConsumer => ({
                    AND: [
                        {
                            account: {
                                number: serviceConsumer.accountNumber,
                                property: { addressKey_in: propertiesForOrganizations[serviceConsumer.organization] },
                                deletedAt: null,
                            },
                            context: {
                                organization: serviceConsumer.organization,
                                deletedAt: null,
                                status: BILLING_CONTEXT_FINISHED_STATUS,
                            },
                            deletedAt: null,
                        }],
                }),
            ),
        })
        return {
            OR: serviceConsumers.map(
                serviceConsumer => ({
                    AND: [
                        {
                            account: {
                                number: serviceConsumer.accountNumber,
                                property: { addressKey_in: propertiesForOrganizations[serviceConsumer.organization] },
                                deletedAt: null,
                            },
                            context: {
                                organization: serviceConsumer.organization,
                                status: BILLING_CONTEXT_FINISHED_STATUS,
                                deletedAt: null,
                            },
                            deletedAt: null,
                        }],
                }),
            ),
        }
    } else {
        return {
            OR: [
                { context: { organization: { employees_some: { user: { id: user.id }, role: { canReadBillingReceipts: true }, deletedAt: null, isBlocked: false } } } },
                { context: { organization: { relatedOrganizations_some: { from: { employees_some: { user: { id: user.id }, role: { canReadBillingReceipts: true }, deletedAt: null, isBlocked: false } } } } } },
                { context: { integration: { accessRights_some: { user: { id: user.id }, deletedAt: null } } } },
            ],
        }
    }
}

async function canReadSensitiveBillingReceiptData ({ authentication: { item: user } }) {
    return user.type !== RESIDENT
}

async function canManageBillingReceipts (args) {
    return await canManageBillingEntityWithContext(args)
}

const readOnlyAccess = { create: false, read: true, update: false }

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadBillingReceipts,
    canManageBillingReceipts,
    canReadSensitiveBillingReceiptData,
    readOnlyAccess,
}
