/**
 * Generated by `createservice billing.SearchBillingReceiptsWithoutConsumerService --type queries`
 */

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/billing/access/SearchBillingReceiptsWithoutConsumerService')
const { BillingReceipt } = require('@condo/domains/billing/utils/serverSchema')
const { NOT_UNIQUE } = require('@condo/domains/common/constants/errors')
const { CONTEXT_FINISHED_STATUS } = require('@condo/domains/miniapp/constants')
const { Property } = require('@condo/domains/property/utils/serverSchema')
const { Resident, ServiceConsumer } = require('@condo/domains/resident/utils/serverSchema')

/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const errors = {
    DUPLICATED_RESIDENTS: {
        mutation: 'searchBillingReceiptsWithoutConsumer',
        variable: ['data', 'residents'],
        code: BAD_USER_INPUT,
        type: NOT_UNIQUE,
        message: 'There are resident duplication',
        messageForUser: 'api.billing.searchBillingReceiptsWithoutConsumer.DUPLICATED_RESIDENTS',
    },
    MISSING_RESIDENTS: {
        mutation: 'searchBillingReceiptsWithoutConsumer',
        variable: ['data', 'residents'],
        code: BAD_USER_INPUT,
        type: NOT_UNIQUE,
        message: 'Can not find some residents',
        messageForUser: 'api.billing.searchBillingReceiptsWithoutConsumer.MISSING_RESIDENTS',
    },
    MISSING_RESIDENT_PROPERTY: {
        mutation: 'searchBillingReceiptsWithoutConsumer',
        code: BAD_USER_INPUT,
        type: NOT_UNIQUE,
        message: 'Can not find some properties for specified residents',
        messageForUser: 'api.billing.searchBillingReceiptsWithoutConsumer.MISSING_RESIDENT_PROPERTY',
    },
}

const SearchBillingReceiptsWithoutConsumerService = new GQLCustomSchema('SearchBillingReceiptsWithoutConsumerService', {
    types: [
        {
            access: true,
            type: 'input SearchBillingReceiptsWithoutConsumerInput { residents: [ResidentWhereUniqueInput!]! }',
        },
        {
            access: true,
            type: 'type SearchBillingReceiptsWithoutConsumerReceiptsGroup { resident: Resident, receipts: [BillingReceipt!]! }',
        },
        {
            access: true,
            type: 'type SearchBillingReceiptsWithoutConsumerOutput { residentReceipts: [SearchBillingReceiptsWithoutConsumerReceiptsGroup!]! }',
        },
    ],
    
    queries: [
        {
            access: access.canSearchBillingReceiptsWithoutConsumer,
            schema: 'searchBillingReceiptsWithoutConsumer (data: SearchBillingReceiptsWithoutConsumerInput!): SearchBillingReceiptsWithoutConsumerOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data } = args
                const {
                    residents: residentIds,
                } = data

                const uniqueResidentIds = new Set(residentIds.map(resident => resident.id))
                if (residentIds.length !== uniqueResidentIds.size) {
                    throw new GQLError(errors.DUPLICATED_RESIDENTS, context)
                }

                // firstly try to retrieve all residents passed to the service
                const residents = await Resident.getAll(context, {
                    id_in: uniqueResidentIds,
                    deletedAt: null,
                })

                if (residents.length !== residentIds.length) {
                    throw new GQLError(errors.MISSING_RESIDENTS, context)
                }

                // retrieve related ServiceConsumers
                const consumers = await ServiceConsumer.getAll(context, {
                    resident: { id_in: uniqueResidentIds },
                    deletedAt: null,
                })

                // filter residents that have service consumer
                const residentsWithoutConsumer = residents.filter(resident => {
                    const exists = consumers.find(consumer => consumer.resident.id === resident.id)
                    return !exists
                })

                // we have to proceed search resident by resident
                const residentReceipts = []
                for (let i = 0 ; i < residentsWithoutConsumer.length; i++) {
                    const {
                        unitName,
                        unitType,
                        property: {
                            id: propertyId,
                        },
                    } = residentsWithoutConsumer[i]

                    const property = await Property.getOne(context, { id: propertyId, deletedAt: null }, {
                        doesNotExistError: errors.MISSING_RESIDENT_PROPERTY,
                    })

                    // assemble conditions
                    const addressCondition = {
                        OR: [
                            { property: { address: property.address } },
                            { property: { addressKey: property.addressKey } },
                            { property: { normalizedAddress: property.address } },
                        ],
                    }
                    const accountCondition = {
                        account: {
                            unitName,
                            unitType,
                        },
                    }
                    const integrationCondition = {
                        context: {
                            status: CONTEXT_FINISHED_STATUS,
                        },
                    }

                    const receipts = await BillingReceipt.getAll(context, {
                        ...addressCondition,
                        ...accountCondition,
                        ...integrationCondition,
                        deletedAt: null,
                    })

                    residentReceipts.push({
                        resident: residents[i],
                        receipts,
                    })
                }

                return {
                    residentReceipts,
                }
            },
        },
    ],
    
})

module.exports = {
    SearchBillingReceiptsWithoutConsumerService,
}
